
W:/ECE243_Computer_Organization/Labs/Lab_7/part1/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 1c 08 00 00 20 08 00 00 24 08 00 00     @....... ...$...
  30:	28 08 00 00 18 08 00 00 2c 08 00 00 30 08 00 00     (.......,...0...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001b6 	bl	7b4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000918 	.word	0x00000918

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d50 	.word	0x00000d50

00000124 <__cs3_heap_start_ptr>:
 124:	00000d78 	.word	0x00000d78

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d58 	.word	0x00000d58
 170:	00000d5b 	.word	0x00000d5b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d58 	.word	0x00000d58
 1bc:	00000d58 	.word	0x00000d58
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d58 	.word	0x00000d58
 200:	00000000 	.word	0x00000000
 204:	000008bc 	.word	0x000008bc

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008bc 	.word	0x000008bc
 250:	00000d5c 	.word	0x00000d5c
 254:	00000918 	.word	0x00000918
 258:	00000000 	.word	0x00000000

0000025c <plot_pixel>:

// code not shown for clear_screen() and draw_line() subroutines

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 25c:	e3003d74 	movw	r3, #3444	; 0xd74
 260:	e3403000 	movt	r3, #0
 264:	e1a00080 	lsl	r0, r0, #1
 268:	e5933000 	ldr	r3, [r3]
 26c:	e0831501 	add	r1, r3, r1, lsl #10
 270:	e18120b0 	strh	r2, [r1, r0]
 274:	e12fff1e 	bx	lr

00000278 <draw_line>:
}

//draws a line from x1, y1 to x2, y2. Requires plotpixel to run
//assumes math.h not available
void draw_line(int x1, int y1, int x2, int y2, int colour) {
 278:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 27c:	e24dd00c 	sub	sp, sp, #12
 280:	e1a08002 	mov	r8, r2
	int is_steep = 0;
	int deltay = y2 - y1;
 284:	e061c003 	rsb	r12, r1, r3
	int deltax = x2 - x1;
 288:	e0602002 	rsb	r2, r0, r2
 28c:	e35c0000 	cmp	r12, #0
 290:	b26cc000 	rsblt	r12, r12, #0
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 294:	e152000c 	cmp	r2, r12
 298:	a3a04000 	movge	r4, #0
 29c:	b3a04001 	movlt	r4, #1
 2a0:	e3520000 	cmp	r2, #0
 2a4:	b3a04000 	movlt	r4, #0
 2a8:	e3540000 	cmp	r4, #0
 2ac:	1a000007 	bne	2d0 <draw_line+0x58>
 2b0:	e3520000 	cmp	r2, #0
 2b4:	a3a0a000 	movge	r10, #0
 2b8:	aa000013 	bge	30c <draw_line+0x94>
 2bc:	e2622000 	rsb	r2, r2, #0
 2c0:	e152000c 	cmp	r2, r12
 2c4:	a3a0a000 	movge	r10, #0
 2c8:	aa00000f 	bge	30c <draw_line+0x94>
 2cc:	ea000007 	b	2f0 <draw_line+0x78>
 2d0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2d4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2d8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2dc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 2e0:	e1a00001 	mov	r0, r1
		y1 = temp;
 2e4:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2e8:	e3a0a001 	mov	r10, #1
 2ec:	ea000006 	b	30c <draw_line+0x94>
 2f0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2f4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2f8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2fc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 300:	e1a00001 	mov	r0, r1
		y1 = temp;
 304:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 308:	e3a0a001 	mov	r10, #1
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 30c:	e1500008 	cmp	r0, r8
 310:	da000005 	ble	32c <draw_line+0xb4>
 314:	e1a02001 	mov	r2, r1
		int temp = x1;
		x1 = x2;
		x2 = temp;

		temp = y1;
		y1 = y2;
 318:	e1a01003 	mov	r1, r3
		y2 = temp;
 31c:	e1a03002 	mov	r3, r2
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 320:	e1a02000 	mov	r2, r0
		int temp = x1;
		x1 = x2;
 324:	e1a00008 	mov	r0, r8
		x2 = temp;
 328:	e1a08002 	mov	r8, r2
		temp = y1;
		y1 = y2;
		y2 = temp;
	}
	
	deltay = y2 - y1;
 32c:	e0617003 	rsb	r7, r1, r3
	deltax = x2 - x1;
 330:	e060b008 	rsb	r11, r0, r8
	error = (-1)*(deltax / 2);
 334:	e08b4fab 	add	r4, r11, r11, lsr #31
 338:	e1a040c4 	asr	r4, r4, #1
 33c:	e2644000 	rsb	r4, r4, #0
 340:	e3570000 	cmp	r7, #0
 344:	b2677000 	rsblt	r7, r7, #0
		deltay = deltay * (-1);
	}

	//determines which way to increment y
	if (y1 < y2) {
		y_step = 1;
 348:	e1510003 	cmp	r1, r3
 34c:	a3e03000 	mvnge	r3, #0
 350:	b3a03001 	movlt	r3, #1
 354:	e58d3004 	str	r3, [sp, #4]
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 358:	e1500008 	cmp	r0, r8
 35c:	ca000010 	bgt	3a4 <draw_line+0x12c>
 360:	e1a05000 	mov	r5, r0
	}
	
	deltay = y2 - y1;
	deltax = x2 - x1;
	error = (-1)*(deltax / 2);
	int y = y1;
 364:	e1a06001 	mov	r6, r1
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
			plot_pixel(y, x, colour);
		}
		else {
			plot_pixel(x, y, colour);
 368:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
 36c:	e35a0000 	cmp	r10, #0
			plot_pixel(y, x, colour);
 370:	11a00006 	movne	r0, r6
 374:	11a01005 	movne	r1, r5
		}
		else {
			plot_pixel(x, y, colour);
 378:	01a00005 	moveq	r0, r5
 37c:	01a01006 	moveq	r1, r6
 380:	e1a02009 	mov	r2, r9
 384:	ebffffb4 	bl	25c <plot_pixel>
		}

		error = error + deltay;

		if (error >= 0) {
 388:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 38c:	559d3004 	ldrpl	r3, [sp, #4]
 390:	50866003 	addpl	r6, r6, r3
			error = error - deltax;
 394:	506b4004 	rsbpl	r4, r11, r4
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 398:	e2855001 	add	r5, r5, #1
 39c:	e1580005 	cmp	r8, r5
 3a0:	aafffff1 	bge	36c <draw_line+0xf4>
		if (error >= 0) {
			y = y + y_step;
			error = error - deltax;
		}
	}	
}
 3a4:	e28dd00c 	add	sp, sp, #12
 3a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003ac <clear_screen>:

//writes all pixels to black
void clear_screen() {
 3ac:	e92d4070 	push	{r4, r5, r6, lr}
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 3b0:	e3a05000 	mov	r5, #0
		}
	}	
}

//writes all pixels to black
void clear_screen() {
 3b4:	e1a06005 	mov	r6, r5
 3b8:	ea000009 	b	3e4 <clear_screen+0x38>
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
			plot_pixel(x, y, 0);
 3bc:	e1a00005 	mov	r0, r5
 3c0:	e1a01004 	mov	r1, r4
 3c4:	e1a02006 	mov	r2, r6
 3c8:	ebffffa3 	bl	25c <plot_pixel>
	int x = 0;
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
 3cc:	e2844001 	add	r4, r4, #1
 3d0:	e35400f0 	cmp	r4, #240	; 0xf0
 3d4:	1afffff8 	bne	3bc <clear_screen+0x10>

//writes all pixels to black
void clear_screen() {
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 3d8:	e2855001 	add	r5, r5, #1
 3dc:	e3550d05 	cmp	r5, #320	; 0x140
 3e0:	08bd8070 	popeq	{r4, r5, r6, pc}
		}
	}	
}

//writes all pixels to black
void clear_screen() {
 3e4:	e1a04006 	mov	r4, r6
 3e8:	eafffff3 	b	3bc <clear_screen+0x10>

000003ec <main>:
		}
	}
}

int main(void)
{
 3ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 3f0:	e24dd00c 	sub	sp, sp, #12
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;

    /* Read location of the pixel buffer from the pixel buffer controller */
   
	pixel_buffer_start = *pixel_ctrl_ptr;
 3f4:	e3033fff 	movw	r3, #16383	; 0x3fff
 3f8:	e34f3f20 	movt	r3, #65312	; 0xff20
 3fc:	e5132fdf 	ldr	r2, [r3, #-4063]	; 0xfffff021
 400:	e3003d74 	movw	r3, #3444	; 0xd74
 404:	e3403000 	movt	r3, #0
 408:	e5832000 	str	r2, [r3]

	
    clear_screen();
 40c:	ebffffe6 	bl	3ac <clear_screen>
    draw_line(0, 0, 150, 150, 0x001F);   // this line is blue
 410:	e3a0301f 	mov	r3, #31
 414:	e58d3000 	str	r3, [sp]
 418:	e3a00000 	mov	r0, #0
 41c:	e1a01000 	mov	r1, r0
 420:	e3a02096 	mov	r2, #150	; 0x96
 424:	e1a03002 	mov	r3, r2
 428:	ebffff92 	bl	278 <draw_line>
    draw_line(150, 150, 319, 0, 0x07E0); // this line is green
 42c:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 430:	e58d3000 	str	r3, [sp]
 434:	e3a00096 	mov	r0, #150	; 0x96
 438:	e1a01000 	mov	r1, r0
 43c:	e300213f 	movw	r2, #319	; 0x13f
 440:	e3a03000 	mov	r3, #0
 444:	ebffff8b 	bl	278 <draw_line>
    draw_line(0, 239, 319, 239, 0xF800); // this line is red
 448:	e3a03b3e 	mov	r3, #63488	; 0xf800
 44c:	e58d3000 	str	r3, [sp]
 450:	e3a00000 	mov	r0, #0
 454:	e3a010ef 	mov	r1, #239	; 0xef
 458:	e300213f 	movw	r2, #319	; 0x13f
 45c:	e1a03001 	mov	r3, r1
 460:	ebffff84 	bl	278 <draw_line>
    draw_line(319, 0, 0, 239, 0xF81F);   // this line is a pink color
 464:	e30f381f 	movw	r3, #63519	; 0xf81f
 468:	e58d3000 	str	r3, [sp]
 46c:	e300013f 	movw	r0, #319	; 0x13f
 470:	e3a01000 	mov	r1, #0
 474:	e1a02001 	mov	r2, r1
 478:	e3a030ef 	mov	r3, #239	; 0xef
 47c:	ebffff7d 	bl	278 <draw_line>
 480:	e28dd00c 	add	sp, sp, #12
 484:	e8bd8000 	ldmfd	sp!, {pc}

00000488 <atexit>:
 488:	e1a01000 	mov	r1, r0
 48c:	e3a00000 	mov	r0, #0
 490:	e92d4008 	push	{r3, lr}
 494:	e1a02000 	mov	r2, r0
 498:	e1a03000 	mov	r3, r0
 49c:	eb00000e 	bl	4dc <__register_exitproc>
 4a0:	e8bd4008 	pop	{r3, lr}
 4a4:	e12fff1e 	bx	lr

000004a8 <exit>:
 4a8:	e92d4008 	push	{r3, lr}
 4ac:	e3a01000 	mov	r1, #0
 4b0:	e1a04000 	mov	r4, r0
 4b4:	eb000045 	bl	5d0 <__call_exitprocs>
 4b8:	e59f3018 	ldr	r3, [pc, #24]	; 4d8 <exit+0x30>
 4bc:	e5930000 	ldr	r0, [r3]
 4c0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4c4:	e3530000 	cmp	r3, #0
 4c8:	11a0e00f 	movne	lr, pc
 4cc:	112fff13 	bxne	r3
 4d0:	e1a00004 	mov	r0, r4
 4d4:	eb0000c9 	bl	800 <_exit>
 4d8:	000008c0 	.word	0x000008c0

000004dc <__register_exitproc>:
 4dc:	e59fc0e4 	ldr	r12, [pc, #228]	; 5c8 <__register_exitproc+0xec>
 4e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4e4:	e59c4000 	ldr	r4, [r12]
 4e8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4ec:	e35c0000 	cmp	r12, #0
 4f0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4f4:	e59c5004 	ldr	r5, [r12, #4]
 4f8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4fc:	e355001f 	cmp	r5, #31
 500:	e24dd010 	sub	sp, sp, #16
 504:	e1a06000 	mov	r6, r0
 508:	da000015 	ble	564 <__register_exitproc+0x88>
 50c:	e59f00b8 	ldr	r0, [pc, #184]	; 5cc <__register_exitproc+0xf0>
 510:	e3500000 	cmp	r0, #0
 514:	1a000001 	bne	520 <__register_exitproc+0x44>
 518:	e3e00000 	mvn	r0, #0
 51c:	ea000018 	b	584 <__register_exitproc+0xa8>
 520:	e3a00e19 	mov	r0, #400	; 0x190
 524:	e58d100c 	str	r1, [sp, #12]
 528:	e58d2008 	str	r2, [sp, #8]
 52c:	e58d3004 	str	r3, [sp, #4]
 530:	e320f000 	nop	{0}
 534:	e250c000 	subs	r12, r0, #0
 538:	e59d100c 	ldr	r1, [sp, #12]
 53c:	e59d2008 	ldr	r2, [sp, #8]
 540:	e59d3004 	ldr	r3, [sp, #4]
 544:	0afffff3 	beq	518 <__register_exitproc+0x3c>
 548:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 54c:	e3a00000 	mov	r0, #0
 550:	e58c0004 	str	r0, [r12, #4]
 554:	e58c5000 	str	r5, [r12]
 558:	e584c148 	str	r12, [r4, #328]	; 0x148
 55c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 560:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 564:	e3560000 	cmp	r6, #0
 568:	e59c4004 	ldr	r4, [r12, #4]
 56c:	1a000007 	bne	590 <__register_exitproc+0xb4>
 570:	e2843002 	add	r3, r4, #2
 574:	e2844001 	add	r4, r4, #1
 578:	e78c1103 	str	r1, [r12, r3, lsl #2]
 57c:	e58c4004 	str	r4, [r12, #4]
 580:	e3a00000 	mov	r0, #0
 584:	e28dd010 	add	sp, sp, #16
 588:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 58c:	e12fff1e 	bx	lr
 590:	e3a00001 	mov	r0, #1
 594:	e1a00410 	lsl	r0, r0, r4
 598:	e08c8104 	add	r8, r12, r4, lsl #2
 59c:	e3560002 	cmp	r6, #2
 5a0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5a4:	e5883108 	str	r3, [r8, #264]	; 0x108
 5a8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5ac:	e1877000 	orr	r7, r7, r0
 5b0:	01830000 	orreq	r0, r3, r0
 5b4:	e1a05008 	mov	r5, r8
 5b8:	e5882088 	str	r2, [r8, #136]	; 0x88
 5bc:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5c0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5c4:	eaffffe9 	b	570 <__register_exitproc+0x94>
 5c8:	000008c0 	.word	0x000008c0
 5cc:	00000000 	.word	0x00000000

000005d0 <__call_exitprocs>:
 5d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5d4:	e59f3168 	ldr	r3, [pc, #360]	; 744 <__call_exitprocs+0x174>
 5d8:	e5933000 	ldr	r3, [r3]
 5dc:	e24dd014 	sub	sp, sp, #20
 5e0:	e58d3004 	str	r3, [sp, #4]
 5e4:	e2833f52 	add	r3, r3, #328	; 0x148
 5e8:	e58d0008 	str	r0, [sp, #8]
 5ec:	e58d300c 	str	r3, [sp, #12]
 5f0:	e1a07001 	mov	r7, r1
 5f4:	e3a08001 	mov	r8, #1
 5f8:	e59d3004 	ldr	r3, [sp, #4]
 5fc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 600:	e3560000 	cmp	r6, #0
 604:	e59db00c 	ldr	r11, [sp, #12]
 608:	0a000033 	beq	6dc <__call_exitprocs+0x10c>
 60c:	e5965004 	ldr	r5, [r6, #4]
 610:	e2554001 	subs	r4, r5, #1
 614:	5286a088 	addpl	r10, r6, #136	; 0x88
 618:	5285501f 	addpl	r5, r5, #31
 61c:	508a5105 	addpl	r5, r10, r5, lsl #2
 620:	5a000007 	bpl	644 <__call_exitprocs+0x74>
 624:	ea000029 	b	6d0 <__call_exitprocs+0x100>
 628:	e5953000 	ldr	r3, [r5]
 62c:	e1530007 	cmp	r3, r7
 630:	0a000005 	beq	64c <__call_exitprocs+0x7c>
 634:	e2444001 	sub	r4, r4, #1
 638:	e3740001 	cmn	r4, #1
 63c:	e2455004 	sub	r5, r5, #4
 640:	0a000022 	beq	6d0 <__call_exitprocs+0x100>
 644:	e3570000 	cmp	r7, #0
 648:	1afffff6 	bne	628 <__call_exitprocs+0x58>
 64c:	e5963004 	ldr	r3, [r6, #4]
 650:	e06a2005 	rsb	r2, r10, r5
 654:	e2433001 	sub	r3, r3, #1
 658:	e0862002 	add	r2, r6, r2
 65c:	e1530004 	cmp	r3, r4
 660:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 664:	13a01000 	movne	r1, #0
 668:	05864004 	streq	r4, [r6, #4]
 66c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 670:	e3530000 	cmp	r3, #0
 674:	0affffee 	beq	634 <__call_exitprocs+0x64>
 678:	e1a02418 	lsl	r2, r8, r4
 67c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 680:	e1120001 	tst	r2, r1
 684:	e5969004 	ldr	r9, [r6, #4]
 688:	0a000016 	beq	6e8 <__call_exitprocs+0x118>
 68c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 690:	e1120001 	tst	r2, r1
 694:	1a000016 	bne	6f4 <__call_exitprocs+0x124>
 698:	e59d0008 	ldr	r0, [sp, #8]
 69c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6a0:	e1a0e00f 	mov	lr, pc
 6a4:	e12fff13 	bx	r3
 6a8:	e5963004 	ldr	r3, [r6, #4]
 6ac:	e1530009 	cmp	r3, r9
 6b0:	1affffd0 	bne	5f8 <__call_exitprocs+0x28>
 6b4:	e59b3000 	ldr	r3, [r11]
 6b8:	e1530006 	cmp	r3, r6
 6bc:	1affffcd 	bne	5f8 <__call_exitprocs+0x28>
 6c0:	e2444001 	sub	r4, r4, #1
 6c4:	e3740001 	cmn	r4, #1
 6c8:	e2455004 	sub	r5, r5, #4
 6cc:	1affffdc 	bne	644 <__call_exitprocs+0x74>
 6d0:	e59f1070 	ldr	r1, [pc, #112]	; 748 <__call_exitprocs+0x178>
 6d4:	e3510000 	cmp	r1, #0
 6d8:	1a000009 	bne	704 <__call_exitprocs+0x134>
 6dc:	e28dd014 	add	sp, sp, #20
 6e0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6e4:	e12fff1e 	bx	lr
 6e8:	e1a0e00f 	mov	lr, pc
 6ec:	e12fff13 	bx	r3
 6f0:	eaffffec 	b	6a8 <__call_exitprocs+0xd8>
 6f4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6f8:	e1a0e00f 	mov	lr, pc
 6fc:	e12fff13 	bx	r3
 700:	eaffffe8 	b	6a8 <__call_exitprocs+0xd8>
 704:	e5963004 	ldr	r3, [r6, #4]
 708:	e3530000 	cmp	r3, #0
 70c:	e5963000 	ldr	r3, [r6]
 710:	1a000008 	bne	738 <__call_exitprocs+0x168>
 714:	e3530000 	cmp	r3, #0
 718:	0a000006 	beq	738 <__call_exitprocs+0x168>
 71c:	e1a00006 	mov	r0, r6
 720:	e58b3000 	str	r3, [r11]
 724:	e320f000 	nop	{0}
 728:	e59b6000 	ldr	r6, [r11]
 72c:	e3560000 	cmp	r6, #0
 730:	1affffb5 	bne	60c <__call_exitprocs+0x3c>
 734:	eaffffe8 	b	6dc <__call_exitprocs+0x10c>
 738:	e1a0b006 	mov	r11, r6
 73c:	e1a06003 	mov	r6, r3
 740:	eafffff9 	b	72c <__call_exitprocs+0x15c>
 744:	000008c0 	.word	0x000008c0
 748:	00000000 	.word	0x00000000

0000074c <register_fini>:
 74c:	e92d4008 	push	{r3, lr}
 750:	e59f3010 	ldr	r3, [pc, #16]	; 768 <register_fini+0x1c>
 754:	e3530000 	cmp	r3, #0
 758:	159f000c 	ldrne	r0, [pc, #12]	; 76c <register_fini+0x20>
 75c:	1bffff49 	blne	488 <atexit>
 760:	e8bd4008 	pop	{r3, lr}
 764:	e12fff1e 	bx	lr
 768:	000008e8 	.word	0x000008e8
 76c:	00000770 	.word	0x00000770

00000770 <__libc_fini_array>:
 770:	e92d4038 	push	{r3, r4, r5, lr}
 774:	e59f5030 	ldr	r5, [pc, #48]	; 7ac <__libc_fini_array+0x3c>
 778:	e59f4030 	ldr	r4, [pc, #48]	; 7b0 <__libc_fini_array+0x40>
 77c:	e0654004 	rsb	r4, r5, r4
 780:	e1b04144 	asrs	r4, r4, #2
 784:	10855104 	addne	r5, r5, r4, lsl #2
 788:	0a000004 	beq	7a0 <__libc_fini_array+0x30>
 78c:	e5353004 	ldr	r3, [r5, #-4]!
 790:	e1a0e00f 	mov	lr, pc
 794:	e12fff13 	bx	r3
 798:	e2544001 	subs	r4, r4, #1
 79c:	1afffffa 	bne	78c <__libc_fini_array+0x1c>
 7a0:	eb000050 	bl	8e8 <__libc_fini>
 7a4:	e8bd4038 	pop	{r3, r4, r5, lr}
 7a8:	e12fff1e 	bx	lr
 7ac:	00000900 	.word	0x00000900
 7b0:	00000904 	.word	0x00000904

000007b4 <__cs3_premain>:
 7b4:	e92d4008 	push	{r3, lr}
 7b8:	eb00001d 	bl	834 <__libc_init_array>
 7bc:	e59f3030 	ldr	r3, [pc, #48]	; 7f4 <__cs3_premain+0x40>
 7c0:	e3530000 	cmp	r3, #0
 7c4:	15930000 	ldrne	r0, [r3]
 7c8:	01a00003 	moveq	r0, r3
 7cc:	e59f3024 	ldr	r3, [pc, #36]	; 7f8 <__cs3_premain+0x44>
 7d0:	e3530000 	cmp	r3, #0
 7d4:	15931000 	ldrne	r1, [r3]
 7d8:	01a01003 	moveq	r1, r3
 7dc:	e3a02000 	mov	r2, #0
 7e0:	ebffff01 	bl	3ec <main>
 7e4:	e59f3010 	ldr	r3, [pc, #16]	; 7fc <__cs3_premain+0x48>
 7e8:	e3530000 	cmp	r3, #0
 7ec:	1bffff2d 	blne	4a8 <exit>
 7f0:	eafffffe 	b	7f0 <__cs3_premain+0x3c>
	...
 7fc:	000004a8 	.word	0x000004a8

00000800 <_exit>:
 800:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 804:	e3a00018 	mov	r0, #24
 808:	e59f1004 	ldr	r1, [pc, #4]	; 814 <_exit+0x14>
 80c:	ef123456 	svc	0x00123456
 810:	eafffffe 	b	810 <_exit+0x10>
 814:	00020026 	.word	0x00020026

00000818 <__cs3_isr_interrupt>:
 818:	eafffffe 	b	818 <__cs3_isr_interrupt>

0000081c <__cs3_isr_undef>:
 81c:	eafffffe 	b	81c <__cs3_isr_undef>

00000820 <__cs3_isr_swi>:
 820:	eafffffe 	b	820 <__cs3_isr_swi>

00000824 <__cs3_isr_pabort>:
 824:	eafffffe 	b	824 <__cs3_isr_pabort>

00000828 <__cs3_isr_dabort>:
 828:	eafffffe 	b	828 <__cs3_isr_dabort>

0000082c <__cs3_isr_irq>:
 82c:	eafffffe 	b	82c <__cs3_isr_irq>

00000830 <__cs3_isr_fiq>:
 830:	eafffffe 	b	830 <__cs3_isr_fiq>

00000834 <__libc_init_array>:
 834:	e92d4070 	push	{r4, r5, r6, lr}
 838:	e59f506c 	ldr	r5, [pc, #108]	; 8ac <__libc_init_array+0x78>
 83c:	e59f606c 	ldr	r6, [pc, #108]	; 8b0 <__libc_init_array+0x7c>
 840:	e0656006 	rsb	r6, r5, r6
 844:	e1b06146 	asrs	r6, r6, #2
 848:	12455004 	subne	r5, r5, #4
 84c:	13a04000 	movne	r4, #0
 850:	0a000005 	beq	86c <__libc_init_array+0x38>
 854:	e5b53004 	ldr	r3, [r5, #4]!
 858:	e2844001 	add	r4, r4, #1
 85c:	e1a0e00f 	mov	lr, pc
 860:	e12fff13 	bx	r3
 864:	e1560004 	cmp	r6, r4
 868:	1afffff9 	bne	854 <__libc_init_array+0x20>
 86c:	e59f5040 	ldr	r5, [pc, #64]	; 8b4 <__libc_init_array+0x80>
 870:	e59f6040 	ldr	r6, [pc, #64]	; 8b8 <__libc_init_array+0x84>
 874:	e0656006 	rsb	r6, r5, r6
 878:	eb000012 	bl	8c8 <_init>
 87c:	e1b06146 	asrs	r6, r6, #2
 880:	12455004 	subne	r5, r5, #4
 884:	13a04000 	movne	r4, #0
 888:	0a000005 	beq	8a4 <__libc_init_array+0x70>
 88c:	e5b53004 	ldr	r3, [r5, #4]!
 890:	e2844001 	add	r4, r4, #1
 894:	e1a0e00f 	mov	lr, pc
 898:	e12fff13 	bx	r3
 89c:	e1560004 	cmp	r6, r4
 8a0:	1afffff9 	bne	88c <__libc_init_array+0x58>
 8a4:	e8bd4070 	pop	{r4, r5, r6, lr}
 8a8:	e12fff1e 	bx	lr
 8ac:	000008e0 	.word	0x000008e0
 8b0:	000008e0 	.word	0x000008e0
 8b4:	000008e0 	.word	0x000008e0
 8b8:	000008e8 	.word	0x000008e8

Disassembly of section .rodata:

000008c0 <_global_impure_ptr>:
 8c0:	00000928 00000043                       (...C...

000008c8 <_init>:
 8c8:	e1a0c00d 	mov	r12, sp
 8cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8d0:	e24cb004 	sub	r11, r12, #4
 8d4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8dc:	e12fff1e 	bx	lr

000008e0 <__init_array_start>:
 8e0:	0000074c 	.word	0x0000074c

000008e4 <__frame_dummy_init_array_entry>:
 8e4:	00000208                                ....

000008e8 <__libc_fini>:
 8e8:	e1a0c00d 	mov	r12, sp
 8ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8f0:	e24cb004 	sub	r11, r12, #4
 8f4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8fc:	e12fff1e 	bx	lr

00000900 <__fini_array_start>:
 900:	000001c4 	.word	0x000001c4

00000904 <__cs3_regions>:
	...
 910:	00000d58 	.word	0x00000d58
 914:	00000020 	.word	0x00000020
