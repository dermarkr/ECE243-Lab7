
W:/ECE243_Computer_Organization/Labs/Lab_7/part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 3c 0b 00 00 40 0b 00 00 44 0b 00 00     @...<...@...D...
  30:	48 0b 00 00 38 0b 00 00 4c 0b 00 00 50 0b 00 00     H...8...L...P...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00027e 	bl	ad4 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c38 	.word	0x00000c38

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001070 	.word	0x00001070

00000124 <__cs3_heap_start_ptr>:
 124:	00001098 	.word	0x00001098

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001078 	.word	0x00001078
 170:	0000107b 	.word	0x0000107b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001078 	.word	0x00001078
 1bc:	00001078 	.word	0x00001078
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001078 	.word	0x00001078
 200:	00000000 	.word	0x00000000
 204:	00000bdc 	.word	0x00000bdc

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000bdc 	.word	0x00000bdc
 250:	0000107c 	.word	0x0000107c
 254:	00000c38 	.word	0x00000c38
 258:	00000000 	.word	0x00000000

0000025c <plot_pixel>:

volatile int pixel_buffer_start; // global variable

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 25c:	e3013094 	movw	r3, #4244	; 0x1094
 260:	e3403000 	movt	r3, #0
 264:	e5933000 	ldr	r3, [r3]
 268:	e1a00080 	lsl	r0, r0, #1
 26c:	e0831501 	add	r1, r3, r1, lsl #10
 270:	e18120b0 	strh	r2, [r1, r0]
 274:	e12fff1e 	bx	lr

00000278 <draw_line>:
}

//draws a line from x1, y1 to x2, y2. Requires plotpixel to run
//assumes math.h not available
void draw_line(int x1, int y1, int x2, int y2, int colour) {
 278:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 27c:	e24dd00c 	sub	sp, sp, #12
 280:	e1a08002 	mov	r8, r2
	int is_steep = 0;
	int deltay = y2 - y1;
 284:	e061c003 	rsb	r12, r1, r3
	int deltax = x2 - x1;
 288:	e0602002 	rsb	r2, r0, r2
 28c:	e35c0000 	cmp	r12, #0
 290:	b26cc000 	rsblt	r12, r12, #0
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 294:	e152000c 	cmp	r2, r12
 298:	a3a04000 	movge	r4, #0
 29c:	b3a04001 	movlt	r4, #1
 2a0:	e3520000 	cmp	r2, #0
 2a4:	b3a04000 	movlt	r4, #0
 2a8:	e3540000 	cmp	r4, #0
 2ac:	1a000007 	bne	2d0 <draw_line+0x58>
 2b0:	e3520000 	cmp	r2, #0
 2b4:	a3a0a000 	movge	r10, #0
 2b8:	aa000013 	bge	30c <draw_line+0x94>
 2bc:	e2622000 	rsb	r2, r2, #0
 2c0:	e152000c 	cmp	r2, r12
 2c4:	a3a0a000 	movge	r10, #0
 2c8:	aa00000f 	bge	30c <draw_line+0x94>
 2cc:	ea000007 	b	2f0 <draw_line+0x78>
 2d0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2d4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2d8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2dc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 2e0:	e1a00001 	mov	r0, r1
		y1 = temp;
 2e4:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2e8:	e3a0a001 	mov	r10, #1
 2ec:	ea000006 	b	30c <draw_line+0x94>
 2f0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2f4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2f8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2fc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 300:	e1a00001 	mov	r0, r1
		y1 = temp;
 304:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 308:	e3a0a001 	mov	r10, #1
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 30c:	e1500008 	cmp	r0, r8
 310:	da000005 	ble	32c <draw_line+0xb4>
 314:	e1a02001 	mov	r2, r1
		int temp = x1;
		x1 = x2;
		x2 = temp;

		temp = y1;
		y1 = y2;
 318:	e1a01003 	mov	r1, r3
		y2 = temp;
 31c:	e1a03002 	mov	r3, r2
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 320:	e1a02000 	mov	r2, r0
		int temp = x1;
		x1 = x2;
 324:	e1a00008 	mov	r0, r8
		x2 = temp;
 328:	e1a08002 	mov	r8, r2

		temp = y1;
		y1 = y2;
		y2 = temp;
	}
	deltay = y2 - y1;
 32c:	e0617003 	rsb	r7, r1, r3
	deltax = x2 - x1;
 330:	e060b008 	rsb	r11, r0, r8
	error = (-1)*(deltax / 2);
 334:	e08b4fab 	add	r4, r11, r11, lsr #31
 338:	e1a040c4 	asr	r4, r4, #1
 33c:	e2644000 	rsb	r4, r4, #0
 340:	e3570000 	cmp	r7, #0
 344:	b2677000 	rsblt	r7, r7, #0
		deltay = deltay * (-1);
	}

	//determines which way to increment y
	if (y1 < y2) {
		y_step = 1;
 348:	e1510003 	cmp	r1, r3
 34c:	a3e03000 	mvnge	r3, #0
 350:	b3a03001 	movlt	r3, #1
 354:	e58d3004 	str	r3, [sp, #4]
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 358:	e1500008 	cmp	r0, r8
 35c:	ca000010 	bgt	3a4 <draw_line+0x12c>
 360:	e1a05000 	mov	r5, r0
		y2 = temp;
	}
	deltay = y2 - y1;
	deltax = x2 - x1;
	error = (-1)*(deltax / 2);
	int y = y1;
 364:	e1a06001 	mov	r6, r1
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
			plot_pixel(y, x, colour);
		}
		else {
			plot_pixel(x, y, colour);
 368:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
 36c:	e35a0000 	cmp	r10, #0
			plot_pixel(y, x, colour);
 370:	11a00006 	movne	r0, r6
 374:	11a01005 	movne	r1, r5
		}
		else {
			plot_pixel(x, y, colour);
 378:	01a00005 	moveq	r0, r5
 37c:	01a01006 	moveq	r1, r6
 380:	e1a02009 	mov	r2, r9
 384:	ebffffb4 	bl	25c <plot_pixel>
		}

		error = error + deltay;

		if (error >= 0) {
 388:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 38c:	559d3004 	ldrpl	r3, [sp, #4]
 390:	50866003 	addpl	r6, r6, r3
			error = error - deltax;
 394:	506b4004 	rsbpl	r4, r11, r4
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 398:	e2855001 	add	r5, r5, #1
 39c:	e1580005 	cmp	r8, r5
 3a0:	aafffff1 	bge	36c <draw_line+0xf4>
		if (error >= 0) {
			y = y + y_step;
			error = error - deltax;
		}
	}	
}
 3a4:	e28dd00c 	add	sp, sp, #12
 3a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003ac <draw_rectangle>:

void draw_rectangle(int x1, int y1, int size, int colour) {
 3ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 3b0:	e24dd008 	sub	sp, sp, #8
 3b4:	e1a06001 	mov	r6, r1
 3b8:	e1a07003 	mov	r7, r3
	int x;
	
	for (x = x1; x < (size + x1); x++){
 3bc:	e0825000 	add	r5, r2, r0
 3c0:	e1500005 	cmp	r0, r5
 3c4:	aa00000a 	bge	3f4 <draw_rectangle+0x48>
 3c8:	e1a04000 	mov	r4, r0
		draw_line(x, y1, x, (size + y1), colour);
 3cc:	e0828001 	add	r8, r2, r1
 3d0:	e58d7000 	str	r7, [sp]
 3d4:	e1a00004 	mov	r0, r4
 3d8:	e1a01006 	mov	r1, r6
 3dc:	e1a02004 	mov	r2, r4
 3e0:	e1a03008 	mov	r3, r8
 3e4:	ebffffa3 	bl	278 <draw_line>
}

void draw_rectangle(int x1, int y1, int size, int colour) {
	int x;
	
	for (x = x1; x < (size + x1); x++){
 3e8:	e2844001 	add	r4, r4, #1
 3ec:	e1540005 	cmp	r4, r5
 3f0:	bafffff6 	blt	3d0 <draw_rectangle+0x24>
		draw_line(x, y1, x, (size + y1), colour);
	}
}
 3f4:	e28dd008 	add	sp, sp, #8
 3f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000003fc <clear_screen>:

//writes all pixels to black
void clear_screen() {
 3fc:	e92d4070 	push	{r4, r5, r6, lr}
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 400:	e3a05000 	mov	r5, #0
		draw_line(x, y1, x, (size + y1), colour);
	}
}

//writes all pixels to black
void clear_screen() {
 404:	e1a06005 	mov	r6, r5
 408:	ea000009 	b	434 <clear_screen+0x38>
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
			plot_pixel(x, y, 0);
 40c:	e1a00005 	mov	r0, r5
 410:	e1a01004 	mov	r1, r4
 414:	e1a02006 	mov	r2, r6
 418:	ebffff8f 	bl	25c <plot_pixel>
	int x = 0;
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
 41c:	e2844001 	add	r4, r4, #1
 420:	e35400f0 	cmp	r4, #240	; 0xf0
 424:	1afffff8 	bne	40c <clear_screen+0x10>

//writes all pixels to black
void clear_screen() {
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 428:	e2855001 	add	r5, r5, #1
 42c:	e3550d05 	cmp	r5, #320	; 0x140
 430:	08bd8070 	popeq	{r4, r5, r6, pc}
		draw_line(x, y1, x, (size + y1), colour);
	}
}

//writes all pixels to black
void clear_screen() {
 434:	e1a04006 	mov	r4, r6
 438:	eafffff3 	b	40c <clear_screen+0x10>

0000043c <wait_for_vsync>:
//waits for the S value in the registry to change to 0 indication the frame is drawn
void wait_for_vsync(){
	volatile int *pixel_ctrl_ptr = (int*)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1;
 43c:	e3033fff 	movw	r3, #16383	; 0x3fff
 440:	e34f3f20 	movt	r3, #65312	; 0xff20
 444:	e3a02001 	mov	r2, #1
 448:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
 44c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 450:	e3130001 	tst	r3, #1
 454:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr +3);
 458:	e3032fff 	movw	r2, #16383	; 0x3fff
 45c:	e34f2f20 	movt	r2, #65312	; 0xff20
 460:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
 464:	e3130001 	tst	r3, #1
 468:	1afffffc 	bne	460 <wait_for_vsync+0x24>
 46c:	e12fff1e 	bx	lr

00000470 <main>:
		status = *(pixel_ctrl_ptr +3);
	}
}

int main(void)
{
 470:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 474:	e24dd094 	sub	sp, sp, #148	; 0x94
 478:	e3a04000 	mov	r4, #0
	int down[8];
	int i = 0;
	int size = 3;
	
	for(i = 0; i < 8; i++){
	rectx[i] = rand()%(319 - size);
 47c:	e3036a55 	movw	r6, #14933	; 0x3a55
 480:	e34667b2 	movt	r6, #26546	; 0x67b2
 484:	e3a08f4f 	mov	r8, #316	; 0x13c
	recty[i] = rand()%(239 - size);
 488:	e3035cbf 	movw	r5, #15551	; 0x3cbf
 48c:	e34252b6 	movt	r5, #8886	; 0x22b6
 490:	e3a070ec 	mov	r7, #236	; 0xec
	int down[8];
	int i = 0;
	int size = 3;
	
	for(i = 0; i < 8; i++){
	rectx[i] = rand()%(319 - size);
 494:	eb0000c1 	bl	7a0 <rand>
 498:	e0c23096 	smull	r3, r2, r6, r0
 49c:	e1a03fc0 	asr	r3, r0, #31
 4a0:	e06333c2 	rsb	r3, r3, r2, asr #7
 4a4:	e0600398 	mls	r0, r8, r3, r0
 4a8:	e28d3070 	add	r3, sp, #112	; 0x70
 4ac:	e7840003 	str	r0, [r4, r3]
	recty[i] = rand()%(239 - size);
 4b0:	eb0000ba 	bl	7a0 <rand>
 4b4:	e0c23095 	smull	r3, r2, r5, r0
 4b8:	e1a03fc0 	asr	r3, r0, #31
 4bc:	e06332c2 	rsb	r3, r3, r2, asr #5
 4c0:	e0600397 	mls	r0, r7, r3, r0
 4c4:	e28d3050 	add	r3, sp, #80	; 0x50
 4c8:	e7840003 	str	r0, [r4, r3]
	right[i] = rand()%2;
 4cc:	eb0000b3 	bl	7a0 <rand>
 4d0:	e0803fa0 	add	r3, r0, r0, lsr #31
 4d4:	e2033001 	and	r3, r3, #1
 4d8:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4dc:	e28d2030 	add	r2, sp, #48	; 0x30
 4e0:	e7840002 	str	r0, [r4, r2]
	down[i] = rand()%2;
 4e4:	eb0000ad 	bl	7a0 <rand>
 4e8:	e0803fa0 	add	r3, r0, r0, lsr #31
 4ec:	e2033001 	and	r3, r3, #1
 4f0:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4f4:	e28d2010 	add	r2, sp, #16
 4f8:	e7840002 	str	r0, [r4, r2]
 4fc:	e2844004 	add	r4, r4, #4
	int right[8];
	int down[8];
	int i = 0;
	int size = 3;
	
	for(i = 0; i < 8; i++){
 500:	e3540020 	cmp	r4, #32
 504:	1affffe2 	bne	494 <main+0x24>
	right[i] = rand()%2;
	down[i] = rand()%2;
	}

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
 508:	e3034fff 	movw	r4, #16383	; 0x3fff
 50c:	e34f4f20 	movt	r4, #65312	; 0xff20
 510:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
 514:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                          						  // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
 518:	ebffffc7 	bl	43c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
 51c:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 520:	e3015094 	movw	r5, #4244	; 0x1094
 524:	e3405000 	movt	r5, #0
 528:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
 52c:	ebffffb2 	bl	3fc <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
 530:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
 534:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
 538:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
 53c:	e5853000 	str	r3, [r5]

    while (1)
    {
		clear_screen();
 540:	e3a08000 	mov	r8, #0
		 /* Erase any boxes and lines that were drawn in the last iteration */
		for(i = 0; i < 8; i++){
			
			draw_rectangle(rectx[i], recty[i], size, 0);
 544:	e3a0b003 	mov	r11, #3
			}
		}
		
		// code for drawing the boxes and lines
		for(i = 0; i < 8; i++){
			draw_rectangle(rectx[i], recty[i], size, 0x001F);
 548:	e3a0901f 	mov	r9, #31
			}
			
		}
       
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 54c:	e3030fff 	movw	r0, #16383	; 0x3fff
 550:	e34f0f20 	movt	r0, #65312	; 0xff20
 554:	e58d000c 	str	r0, [sp, #12]
 558:	e58d5008 	str	r5, [sp, #8]
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer

    while (1)
    {
		clear_screen();
 55c:	ebffffa6 	bl	3fc <clear_screen>
 560:	e1a07008 	mov	r7, r8
 564:	e1a04008 	mov	r4, r8
		 /* Erase any boxes and lines that were drawn in the last iteration */
		for(i = 0; i < 8; i++){
 568:	e1a06008 	mov	r6, r8
			
			draw_rectangle(rectx[i], recty[i], size, 0);
 56c:	e28d3070 	add	r3, sp, #112	; 0x70
 570:	e7945003 	ldr	r5, [r4, r3]
 574:	e2877004 	add	r7, r7, #4
 578:	e28d3050 	add	r3, sp, #80	; 0x50
 57c:	e794a003 	ldr	r10, [r4, r3]
 580:	e1a00005 	mov	r0, r5
 584:	e1a0100a 	mov	r1, r10
 588:	e1a0200b 	mov	r2, r11
 58c:	e1a03008 	mov	r3, r8
 590:	ebffff85 	bl	3ac <draw_rectangle>
			
			if(i != 7){
 594:	e3560007 	cmp	r6, #7
 598:	0a000008 	beq	5c0 <main+0x150>
				draw_line(rectx[i], recty[i], rectx[i + 1], recty[i + 1], 0);
 59c:	e28d3070 	add	r3, sp, #112	; 0x70
 5a0:	e7972003 	ldr	r2, [r7, r3]
 5a4:	e28d3050 	add	r3, sp, #80	; 0x50
 5a8:	e7973003 	ldr	r3, [r7, r3]
 5ac:	e58d8000 	str	r8, [sp]
 5b0:	e1a00005 	mov	r0, r5
 5b4:	e1a0100a 	mov	r1, r10
 5b8:	ebffff2e 	bl	278 <draw_line>
 5bc:	ea000005 	b	5d8 <main+0x168>
			}
			else{
				draw_line(rectx[i], recty[i], rectx[0], recty[0], 0);
 5c0:	e58d8000 	str	r8, [sp]
 5c4:	e1a00005 	mov	r0, r5
 5c8:	e1a0100a 	mov	r1, r10
 5cc:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
 5d0:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
 5d4:	ebffff27 	bl	278 <draw_line>
			}
			
			if(rectx[i] == (319 - size)){
 5d8:	e3550f4f 	cmp	r5, #316	; 0x13c
				right[i] = 0;
 5dc:	028d3030 	addeq	r3, sp, #48	; 0x30
 5e0:	07848003 	streq	r8, [r4, r3]
			}
			else{
				draw_line(rectx[i], recty[i], rectx[0], recty[0], 0);
			}
			
			if(rectx[i] == (319 - size)){
 5e4:	0a000003 	beq	5f8 <main+0x188>
				right[i] = 0;
			}
			else if(rectx[i] == 0){
 5e8:	e3550000 	cmp	r5, #0
				right[i] = 1;
 5ec:	028d3030 	addeq	r3, sp, #48	; 0x30
 5f0:	03a00001 	moveq	r0, #1
 5f4:	07840003 	streq	r0, [r4, r3]

    while (1)
    {
		clear_screen();
		 /* Erase any boxes and lines that were drawn in the last iteration */
		for(i = 0; i < 8; i++){
 5f8:	e2866001 	add	r6, r6, #1
 5fc:	e2844004 	add	r4, r4, #4
 600:	e3560008 	cmp	r6, #8
 604:	1affffd8 	bne	56c <main+0xfc>
 608:	e1a03008 	mov	r3, r8
		}
		
		for (i = 0; i < 8; i++){
						// code for updating the locations of boxes
			//checking for collisions
			if(recty[i] == (239 - size)){
 60c:	e28d2050 	add	r2, sp, #80	; 0x50
 610:	e7932002 	ldr	r2, [r3, r2]
 614:	e35200ec 	cmp	r2, #236	; 0xec
				down[i] = 0;
 618:	028d1010 	addeq	r1, sp, #16
 61c:	07838001 	streq	r8, [r3, r1]
		}
		
		for (i = 0; i < 8; i++){
						// code for updating the locations of boxes
			//checking for collisions
			if(recty[i] == (239 - size)){
 620:	0a000003 	beq	634 <main+0x1c4>
				down[i] = 0;
			}
			else if(recty[i] == 0){
 624:	e3520000 	cmp	r2, #0
				down[i] = 1;
 628:	028d1010 	addeq	r1, sp, #16
 62c:	03a00001 	moveq	r0, #1
 630:	07830001 	streq	r0, [r3, r1]
			}
			
			//incrementing x and y values
			if(right[i]){
 634:	e28d1030 	add	r1, sp, #48	; 0x30
 638:	e7931001 	ldr	r1, [r3, r1]
 63c:	e3510000 	cmp	r1, #0
				rectx[i] ++;
 640:	e28d1070 	add	r1, sp, #112	; 0x70
 644:	e7930001 	ldr	r0, [r3, r1]
 648:	12800001 	addne	r0, r0, #1
			}
			else{
				rectx[i] --;
 64c:	02400001 	subeq	r0, r0, #1
 650:	e7830001 	str	r0, [r3, r1]
			}
			
			if(down[i]){
 654:	e28d1010 	add	r1, sp, #16
 658:	e7931001 	ldr	r1, [r3, r1]
 65c:	e3510000 	cmp	r1, #0
				recty[i] ++;
 660:	12822001 	addne	r2, r2, #1
			}
			else{
				recty[i] --;
 664:	02422001 	subeq	r2, r2, #1
 668:	e28d1050 	add	r1, sp, #80	; 0x50
 66c:	e7832001 	str	r2, [r3, r1]
 670:	e2833004 	add	r3, r3, #4

			

		}
		
		for (i = 0; i < 8; i++){
 674:	e3530020 	cmp	r3, #32
 678:	1affffe3 	bne	60c <main+0x19c>
 67c:	ea000021 	b	708 <main+0x298>
			}
		}
		
		// code for drawing the boxes and lines
		for(i = 0; i < 8; i++){
			draw_rectangle(rectx[i], recty[i], size, 0x001F);
 680:	e28d3070 	add	r3, sp, #112	; 0x70
 684:	e7946003 	ldr	r6, [r4, r3]
 688:	e28d3050 	add	r3, sp, #80	; 0x50
 68c:	e7945003 	ldr	r5, [r4, r3]
 690:	e1a00006 	mov	r0, r6
 694:	e1a01005 	mov	r1, r5
 698:	e1a0200b 	mov	r2, r11
 69c:	e1a03009 	mov	r3, r9
 6a0:	ebffff41 	bl	3ac <draw_rectangle>
			
			if(i != 7){
 6a4:	e354001c 	cmp	r4, #28
 6a8:	0a00000a 	beq	6d8 <main+0x268>
				draw_line(rectx[i], recty[i], rectx[i + 1], recty[i + 1], 0x001F);
 6ac:	e5b72004 	ldr	r2, [r7, #4]!
 6b0:	e2844004 	add	r4, r4, #4
 6b4:	e28d3050 	add	r3, sp, #80	; 0x50
 6b8:	e7943003 	ldr	r3, [r4, r3]
 6bc:	e58d9000 	str	r9, [sp]
 6c0:	e1a00006 	mov	r0, r6
 6c4:	e1a01005 	mov	r1, r5
 6c8:	ebfffeea 	bl	278 <draw_line>
				recty[i] --;
			}
		}
		
		// code for drawing the boxes and lines
		for(i = 0; i < 8; i++){
 6cc:	e3540020 	cmp	r4, #32
 6d0:	1affffea 	bne	680 <main+0x210>
 6d4:	ea000005 	b	6f0 <main+0x280>
			
			if(i != 7){
				draw_line(rectx[i], recty[i], rectx[i + 1], recty[i + 1], 0x001F);
			}
			else{
				draw_line(rectx[i], recty[i], rectx[0], recty[0], 0x001F);
 6d8:	e58d9000 	str	r9, [sp]
 6dc:	e59d008c 	ldr	r0, [sp, #140]	; 0x8c
 6e0:	e59d106c 	ldr	r1, [sp, #108]	; 0x6c
 6e4:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
 6e8:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
 6ec:	ebfffee1 	bl	278 <draw_line>
			}
			
		}
       
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
 6f0:	ebffff51 	bl	43c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 6f4:	e59d200c 	ldr	r2, [sp, #12]
 6f8:	e5123fdb 	ldr	r3, [r2, #-4059]	; 0xfffff025
 6fc:	e59d0008 	ldr	r0, [sp, #8]
 700:	e5803000 	str	r3, [r0]
    }
 704:	eaffff94 	b	55c <main+0xec>
			}
		}
		
		// code for drawing the boxes and lines
		for(i = 0; i < 8; i++){
			draw_rectangle(rectx[i], recty[i], size, 0x001F);
 708:	e59d6070 	ldr	r6, [sp, #112]	; 0x70
 70c:	e59d5050 	ldr	r5, [sp, #80]	; 0x50
 710:	e1a00006 	mov	r0, r6
 714:	e1a01005 	mov	r1, r5
 718:	e1a0200b 	mov	r2, r11
 71c:	e1a03009 	mov	r3, r9
 720:	ebffff21 	bl	3ac <draw_rectangle>
 724:	e28d7070 	add	r7, sp, #112	; 0x70
 728:	e1a04008 	mov	r4, r8
 72c:	eaffffde 	b	6ac <main+0x23c>

00000730 <atexit>:
 730:	e1a01000 	mov	r1, r0
 734:	e3a00000 	mov	r0, #0
 738:	e92d4008 	push	{r3, lr}
 73c:	e1a02000 	mov	r2, r0
 740:	e1a03000 	mov	r3, r0
 744:	eb00002c 	bl	7fc <__register_exitproc>
 748:	e8bd4008 	pop	{r3, lr}
 74c:	e12fff1e 	bx	lr

00000750 <exit>:
 750:	e92d4008 	push	{r3, lr}
 754:	e3a01000 	mov	r1, #0
 758:	e1a04000 	mov	r4, r0
 75c:	eb000063 	bl	8f0 <__call_exitprocs>
 760:	e59f3018 	ldr	r3, [pc, #24]	; 780 <exit+0x30>
 764:	e5930000 	ldr	r0, [r3]
 768:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 76c:	e3530000 	cmp	r3, #0
 770:	11a0e00f 	movne	lr, pc
 774:	112fff13 	bxne	r3
 778:	e1a00004 	mov	r0, r4
 77c:	eb0000e7 	bl	b20 <_exit>
 780:	00000be0 	.word	0x00000be0

00000784 <srand>:
 784:	e59f3010 	ldr	r3, [pc, #16]	; 79c <srand+0x18>
 788:	e5933000 	ldr	r3, [r3]
 78c:	e3a02000 	mov	r2, #0
 790:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 794:	e58320ac 	str	r2, [r3, #172]	; 0xac
 798:	e12fff1e 	bx	lr
 79c:	00000c40 	.word	0x00000c40

000007a0 <rand>:
 7a0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 7a4:	e59f3044 	ldr	r3, [pc, #68]	; 7f0 <rand+0x50>
 7a8:	e593c000 	ldr	r12, [r3]
 7ac:	e59f4040 	ldr	r4, [pc, #64]	; 7f4 <rand+0x54>
 7b0:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 7b4:	e0040492 	mul	r4, r2, r4
 7b8:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 7bc:	e59f3034 	ldr	r3, [pc, #52]	; 7f8 <rand+0x58>
 7c0:	e0244193 	mla	r4, r3, r1, r4
 7c4:	e0810392 	umull	r0, r1, r2, r3
 7c8:	e3a02001 	mov	r2, #1
 7cc:	e0922000 	adds	r2, r2, r0
 7d0:	e0841001 	add	r1, r4, r1
 7d4:	e3a03000 	mov	r3, #0
 7d8:	e0a33001 	adc	r3, r3, r1
 7dc:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 7e0:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 7e4:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 7e8:	e8bd0010 	ldmfd	sp!, {r4}
 7ec:	e12fff1e 	bx	lr
 7f0:	00000c40 	.word	0x00000c40
 7f4:	5851f42d 	.word	0x5851f42d
 7f8:	4c957f2d 	.word	0x4c957f2d

000007fc <__register_exitproc>:
 7fc:	e59fc0e4 	ldr	r12, [pc, #228]	; 8e8 <__register_exitproc+0xec>
 800:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 804:	e59c4000 	ldr	r4, [r12]
 808:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 80c:	e35c0000 	cmp	r12, #0
 810:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 814:	e59c5004 	ldr	r5, [r12, #4]
 818:	0584c148 	streq	r12, [r4, #328]	; 0x148
 81c:	e355001f 	cmp	r5, #31
 820:	e24dd010 	sub	sp, sp, #16
 824:	e1a06000 	mov	r6, r0
 828:	da000015 	ble	884 <__register_exitproc+0x88>
 82c:	e59f00b8 	ldr	r0, [pc, #184]	; 8ec <__register_exitproc+0xf0>
 830:	e3500000 	cmp	r0, #0
 834:	1a000001 	bne	840 <__register_exitproc+0x44>
 838:	e3e00000 	mvn	r0, #0
 83c:	ea000018 	b	8a4 <__register_exitproc+0xa8>
 840:	e3a00e19 	mov	r0, #400	; 0x190
 844:	e58d100c 	str	r1, [sp, #12]
 848:	e58d2008 	str	r2, [sp, #8]
 84c:	e58d3004 	str	r3, [sp, #4]
 850:	e320f000 	nop	{0}
 854:	e250c000 	subs	r12, r0, #0
 858:	e59d100c 	ldr	r1, [sp, #12]
 85c:	e59d2008 	ldr	r2, [sp, #8]
 860:	e59d3004 	ldr	r3, [sp, #4]
 864:	0afffff3 	beq	838 <__register_exitproc+0x3c>
 868:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 86c:	e3a00000 	mov	r0, #0
 870:	e58c0004 	str	r0, [r12, #4]
 874:	e58c5000 	str	r5, [r12]
 878:	e584c148 	str	r12, [r4, #328]	; 0x148
 87c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 880:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 884:	e3560000 	cmp	r6, #0
 888:	e59c4004 	ldr	r4, [r12, #4]
 88c:	1a000007 	bne	8b0 <__register_exitproc+0xb4>
 890:	e2843002 	add	r3, r4, #2
 894:	e2844001 	add	r4, r4, #1
 898:	e78c1103 	str	r1, [r12, r3, lsl #2]
 89c:	e58c4004 	str	r4, [r12, #4]
 8a0:	e3a00000 	mov	r0, #0
 8a4:	e28dd010 	add	sp, sp, #16
 8a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8ac:	e12fff1e 	bx	lr
 8b0:	e3a00001 	mov	r0, #1
 8b4:	e1a00410 	lsl	r0, r0, r4
 8b8:	e08c8104 	add	r8, r12, r4, lsl #2
 8bc:	e3560002 	cmp	r6, #2
 8c0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 8c4:	e5883108 	str	r3, [r8, #264]	; 0x108
 8c8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 8cc:	e1877000 	orr	r7, r7, r0
 8d0:	01830000 	orreq	r0, r3, r0
 8d4:	e1a05008 	mov	r5, r8
 8d8:	e5882088 	str	r2, [r8, #136]	; 0x88
 8dc:	e58c7188 	str	r7, [r12, #392]	; 0x188
 8e0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 8e4:	eaffffe9 	b	890 <__register_exitproc+0x94>
 8e8:	00000be0 	.word	0x00000be0
 8ec:	00000000 	.word	0x00000000

000008f0 <__call_exitprocs>:
 8f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8f4:	e59f3168 	ldr	r3, [pc, #360]	; a64 <__call_exitprocs+0x174>
 8f8:	e5933000 	ldr	r3, [r3]
 8fc:	e24dd014 	sub	sp, sp, #20
 900:	e58d3004 	str	r3, [sp, #4]
 904:	e2833f52 	add	r3, r3, #328	; 0x148
 908:	e58d0008 	str	r0, [sp, #8]
 90c:	e58d300c 	str	r3, [sp, #12]
 910:	e1a07001 	mov	r7, r1
 914:	e3a08001 	mov	r8, #1
 918:	e59d3004 	ldr	r3, [sp, #4]
 91c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 920:	e3560000 	cmp	r6, #0
 924:	e59db00c 	ldr	r11, [sp, #12]
 928:	0a000033 	beq	9fc <__call_exitprocs+0x10c>
 92c:	e5965004 	ldr	r5, [r6, #4]
 930:	e2554001 	subs	r4, r5, #1
 934:	5286a088 	addpl	r10, r6, #136	; 0x88
 938:	5285501f 	addpl	r5, r5, #31
 93c:	508a5105 	addpl	r5, r10, r5, lsl #2
 940:	5a000007 	bpl	964 <__call_exitprocs+0x74>
 944:	ea000029 	b	9f0 <__call_exitprocs+0x100>
 948:	e5953000 	ldr	r3, [r5]
 94c:	e1530007 	cmp	r3, r7
 950:	0a000005 	beq	96c <__call_exitprocs+0x7c>
 954:	e2444001 	sub	r4, r4, #1
 958:	e3740001 	cmn	r4, #1
 95c:	e2455004 	sub	r5, r5, #4
 960:	0a000022 	beq	9f0 <__call_exitprocs+0x100>
 964:	e3570000 	cmp	r7, #0
 968:	1afffff6 	bne	948 <__call_exitprocs+0x58>
 96c:	e5963004 	ldr	r3, [r6, #4]
 970:	e06a2005 	rsb	r2, r10, r5
 974:	e2433001 	sub	r3, r3, #1
 978:	e0862002 	add	r2, r6, r2
 97c:	e1530004 	cmp	r3, r4
 980:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 984:	13a01000 	movne	r1, #0
 988:	05864004 	streq	r4, [r6, #4]
 98c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 990:	e3530000 	cmp	r3, #0
 994:	0affffee 	beq	954 <__call_exitprocs+0x64>
 998:	e1a02418 	lsl	r2, r8, r4
 99c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 9a0:	e1120001 	tst	r2, r1
 9a4:	e5969004 	ldr	r9, [r6, #4]
 9a8:	0a000016 	beq	a08 <__call_exitprocs+0x118>
 9ac:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 9b0:	e1120001 	tst	r2, r1
 9b4:	1a000016 	bne	a14 <__call_exitprocs+0x124>
 9b8:	e59d0008 	ldr	r0, [sp, #8]
 9bc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 9c0:	e1a0e00f 	mov	lr, pc
 9c4:	e12fff13 	bx	r3
 9c8:	e5963004 	ldr	r3, [r6, #4]
 9cc:	e1530009 	cmp	r3, r9
 9d0:	1affffd0 	bne	918 <__call_exitprocs+0x28>
 9d4:	e59b3000 	ldr	r3, [r11]
 9d8:	e1530006 	cmp	r3, r6
 9dc:	1affffcd 	bne	918 <__call_exitprocs+0x28>
 9e0:	e2444001 	sub	r4, r4, #1
 9e4:	e3740001 	cmn	r4, #1
 9e8:	e2455004 	sub	r5, r5, #4
 9ec:	1affffdc 	bne	964 <__call_exitprocs+0x74>
 9f0:	e59f1070 	ldr	r1, [pc, #112]	; a68 <__call_exitprocs+0x178>
 9f4:	e3510000 	cmp	r1, #0
 9f8:	1a000009 	bne	a24 <__call_exitprocs+0x134>
 9fc:	e28dd014 	add	sp, sp, #20
 a00:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a04:	e12fff1e 	bx	lr
 a08:	e1a0e00f 	mov	lr, pc
 a0c:	e12fff13 	bx	r3
 a10:	eaffffec 	b	9c8 <__call_exitprocs+0xd8>
 a14:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a18:	e1a0e00f 	mov	lr, pc
 a1c:	e12fff13 	bx	r3
 a20:	eaffffe8 	b	9c8 <__call_exitprocs+0xd8>
 a24:	e5963004 	ldr	r3, [r6, #4]
 a28:	e3530000 	cmp	r3, #0
 a2c:	e5963000 	ldr	r3, [r6]
 a30:	1a000008 	bne	a58 <__call_exitprocs+0x168>
 a34:	e3530000 	cmp	r3, #0
 a38:	0a000006 	beq	a58 <__call_exitprocs+0x168>
 a3c:	e1a00006 	mov	r0, r6
 a40:	e58b3000 	str	r3, [r11]
 a44:	e320f000 	nop	{0}
 a48:	e59b6000 	ldr	r6, [r11]
 a4c:	e3560000 	cmp	r6, #0
 a50:	1affffb5 	bne	92c <__call_exitprocs+0x3c>
 a54:	eaffffe8 	b	9fc <__call_exitprocs+0x10c>
 a58:	e1a0b006 	mov	r11, r6
 a5c:	e1a06003 	mov	r6, r3
 a60:	eafffff9 	b	a4c <__call_exitprocs+0x15c>
 a64:	00000be0 	.word	0x00000be0
 a68:	00000000 	.word	0x00000000

00000a6c <register_fini>:
 a6c:	e92d4008 	push	{r3, lr}
 a70:	e59f3010 	ldr	r3, [pc, #16]	; a88 <register_fini+0x1c>
 a74:	e3530000 	cmp	r3, #0
 a78:	159f000c 	ldrne	r0, [pc, #12]	; a8c <register_fini+0x20>
 a7c:	1bffff2b 	blne	730 <atexit>
 a80:	e8bd4008 	pop	{r3, lr}
 a84:	e12fff1e 	bx	lr
 a88:	00000c08 	.word	0x00000c08
 a8c:	00000a90 	.word	0x00000a90

00000a90 <__libc_fini_array>:
 a90:	e92d4038 	push	{r3, r4, r5, lr}
 a94:	e59f5030 	ldr	r5, [pc, #48]	; acc <__libc_fini_array+0x3c>
 a98:	e59f4030 	ldr	r4, [pc, #48]	; ad0 <__libc_fini_array+0x40>
 a9c:	e0654004 	rsb	r4, r5, r4
 aa0:	e1b04144 	asrs	r4, r4, #2
 aa4:	10855104 	addne	r5, r5, r4, lsl #2
 aa8:	0a000004 	beq	ac0 <__libc_fini_array+0x30>
 aac:	e5353004 	ldr	r3, [r5, #-4]!
 ab0:	e1a0e00f 	mov	lr, pc
 ab4:	e12fff13 	bx	r3
 ab8:	e2544001 	subs	r4, r4, #1
 abc:	1afffffa 	bne	aac <__libc_fini_array+0x1c>
 ac0:	eb000050 	bl	c08 <__libc_fini>
 ac4:	e8bd4038 	pop	{r3, r4, r5, lr}
 ac8:	e12fff1e 	bx	lr
 acc:	00000c20 	.word	0x00000c20
 ad0:	00000c24 	.word	0x00000c24

00000ad4 <__cs3_premain>:
 ad4:	e92d4008 	push	{r3, lr}
 ad8:	eb00001d 	bl	b54 <__libc_init_array>
 adc:	e59f3030 	ldr	r3, [pc, #48]	; b14 <__cs3_premain+0x40>
 ae0:	e3530000 	cmp	r3, #0
 ae4:	15930000 	ldrne	r0, [r3]
 ae8:	01a00003 	moveq	r0, r3
 aec:	e59f3024 	ldr	r3, [pc, #36]	; b18 <__cs3_premain+0x44>
 af0:	e3530000 	cmp	r3, #0
 af4:	15931000 	ldrne	r1, [r3]
 af8:	01a01003 	moveq	r1, r3
 afc:	e3a02000 	mov	r2, #0
 b00:	ebfffe5a 	bl	470 <main>
 b04:	e59f3010 	ldr	r3, [pc, #16]	; b1c <__cs3_premain+0x48>
 b08:	e3530000 	cmp	r3, #0
 b0c:	1bffff0f 	blne	750 <exit>
 b10:	eafffffe 	b	b10 <__cs3_premain+0x3c>
	...
 b1c:	00000750 	.word	0x00000750

00000b20 <_exit>:
 b20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b24:	e3a00018 	mov	r0, #24
 b28:	e59f1004 	ldr	r1, [pc, #4]	; b34 <_exit+0x14>
 b2c:	ef123456 	svc	0x00123456
 b30:	eafffffe 	b	b30 <_exit+0x10>
 b34:	00020026 	.word	0x00020026

00000b38 <__cs3_isr_interrupt>:
 b38:	eafffffe 	b	b38 <__cs3_isr_interrupt>

00000b3c <__cs3_isr_undef>:
 b3c:	eafffffe 	b	b3c <__cs3_isr_undef>

00000b40 <__cs3_isr_swi>:
 b40:	eafffffe 	b	b40 <__cs3_isr_swi>

00000b44 <__cs3_isr_pabort>:
 b44:	eafffffe 	b	b44 <__cs3_isr_pabort>

00000b48 <__cs3_isr_dabort>:
 b48:	eafffffe 	b	b48 <__cs3_isr_dabort>

00000b4c <__cs3_isr_irq>:
 b4c:	eafffffe 	b	b4c <__cs3_isr_irq>

00000b50 <__cs3_isr_fiq>:
 b50:	eafffffe 	b	b50 <__cs3_isr_fiq>

00000b54 <__libc_init_array>:
 b54:	e92d4070 	push	{r4, r5, r6, lr}
 b58:	e59f506c 	ldr	r5, [pc, #108]	; bcc <__libc_init_array+0x78>
 b5c:	e59f606c 	ldr	r6, [pc, #108]	; bd0 <__libc_init_array+0x7c>
 b60:	e0656006 	rsb	r6, r5, r6
 b64:	e1b06146 	asrs	r6, r6, #2
 b68:	12455004 	subne	r5, r5, #4
 b6c:	13a04000 	movne	r4, #0
 b70:	0a000005 	beq	b8c <__libc_init_array+0x38>
 b74:	e5b53004 	ldr	r3, [r5, #4]!
 b78:	e2844001 	add	r4, r4, #1
 b7c:	e1a0e00f 	mov	lr, pc
 b80:	e12fff13 	bx	r3
 b84:	e1560004 	cmp	r6, r4
 b88:	1afffff9 	bne	b74 <__libc_init_array+0x20>
 b8c:	e59f5040 	ldr	r5, [pc, #64]	; bd4 <__libc_init_array+0x80>
 b90:	e59f6040 	ldr	r6, [pc, #64]	; bd8 <__libc_init_array+0x84>
 b94:	e0656006 	rsb	r6, r5, r6
 b98:	eb000012 	bl	be8 <_init>
 b9c:	e1b06146 	asrs	r6, r6, #2
 ba0:	12455004 	subne	r5, r5, #4
 ba4:	13a04000 	movne	r4, #0
 ba8:	0a000005 	beq	bc4 <__libc_init_array+0x70>
 bac:	e5b53004 	ldr	r3, [r5, #4]!
 bb0:	e2844001 	add	r4, r4, #1
 bb4:	e1a0e00f 	mov	lr, pc
 bb8:	e12fff13 	bx	r3
 bbc:	e1560004 	cmp	r6, r4
 bc0:	1afffff9 	bne	bac <__libc_init_array+0x58>
 bc4:	e8bd4070 	pop	{r4, r5, r6, lr}
 bc8:	e12fff1e 	bx	lr
 bcc:	00000c00 	.word	0x00000c00
 bd0:	00000c00 	.word	0x00000c00
 bd4:	00000c00 	.word	0x00000c00
 bd8:	00000c08 	.word	0x00000c08

Disassembly of section .rodata:

00000be0 <_global_impure_ptr>:
 be0:	00000c48 00000043                       H...C...

00000be8 <_init>:
 be8:	e1a0c00d 	mov	r12, sp
 bec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 bf0:	e24cb004 	sub	r11, r12, #4
 bf4:	e24bd028 	sub	sp, r11, #40	; 0x28
 bf8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 bfc:	e12fff1e 	bx	lr

00000c00 <__init_array_start>:
 c00:	00000a6c 	.word	0x00000a6c

00000c04 <__frame_dummy_init_array_entry>:
 c04:	00000208                                ....

00000c08 <__libc_fini>:
 c08:	e1a0c00d 	mov	r12, sp
 c0c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c10:	e24cb004 	sub	r11, r12, #4
 c14:	e24bd028 	sub	sp, r11, #40	; 0x28
 c18:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c1c:	e12fff1e 	bx	lr

00000c20 <__fini_array_start>:
 c20:	000001c4 	.word	0x000001c4

00000c24 <__cs3_regions>:
	...
 c30:	00001078 	.word	0x00001078
 c34:	00000020 	.word	0x00000020
