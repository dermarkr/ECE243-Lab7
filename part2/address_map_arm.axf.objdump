
W:/ECE243_Computer_Organization/Labs/Lab_7/part2/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 cc 08 00 00 d0 08 00 00 d4 08 00 00     @...............
  30:	d8 08 00 00 c8 08 00 00 dc 08 00 00 e0 08 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001e2 	bl	864 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000009c8 	.word	0x000009c8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000e00 	.word	0x00000e00

00000124 <__cs3_heap_start_ptr>:
 124:	00000e28 	.word	0x00000e28

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000e08 	.word	0x00000e08
 170:	00000e0b 	.word	0x00000e0b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000e08 	.word	0x00000e08
 1bc:	00000e08 	.word	0x00000e08
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000e08 	.word	0x00000e08
 200:	00000000 	.word	0x00000000
 204:	0000096c 	.word	0x0000096c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	0000096c 	.word	0x0000096c
 250:	00000e0c 	.word	0x00000e0c
 254:	000009c8 	.word	0x000009c8
 258:	00000000 	.word	0x00000000

0000025c <plot_pixel>:

// code not shown for clear_screen() and draw_line() subroutines

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)((pixel_buffer_start) + (y << 10) + (x << 1)) = line_color;
 25c:	e3003e24 	movw	r3, #3620	; 0xe24
 260:	e3403000 	movt	r3, #0
 264:	e1a00080 	lsl	r0, r0, #1
 268:	e5933000 	ldr	r3, [r3]
 26c:	e0831501 	add	r1, r3, r1, lsl #10
 270:	e18120b0 	strh	r2, [r1, r0]
 274:	e12fff1e 	bx	lr

00000278 <draw_line>:
}

//draws a line from x1, y1 to x2, y2. Requires plotpixel to run
//assumes math.h not available
void draw_line(int x1, int y1, int x2, int y2, int colour) {
 278:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 27c:	e24dd00c 	sub	sp, sp, #12
 280:	e1a08002 	mov	r8, r2
	int is_steep = 0;
	int deltay = y2 - y1;
 284:	e061c003 	rsb	r12, r1, r3
	int deltax = x2 - x1;
 288:	e0602002 	rsb	r2, r0, r2
 28c:	e35c0000 	cmp	r12, #0
 290:	b26cc000 	rsblt	r12, r12, #0
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 294:	e152000c 	cmp	r2, r12
 298:	a3a04000 	movge	r4, #0
 29c:	b3a04001 	movlt	r4, #1
 2a0:	e3520000 	cmp	r2, #0
 2a4:	b3a04000 	movlt	r4, #0
 2a8:	e3540000 	cmp	r4, #0
 2ac:	1a000007 	bne	2d0 <draw_line+0x58>
 2b0:	e3520000 	cmp	r2, #0
 2b4:	a3a0a000 	movge	r10, #0
 2b8:	aa000013 	bge	30c <draw_line+0x94>
 2bc:	e2622000 	rsb	r2, r2, #0
 2c0:	e152000c 	cmp	r2, r12
 2c4:	a3a0a000 	movge	r10, #0
 2c8:	aa00000f 	bge	30c <draw_line+0x94>
 2cc:	ea000007 	b	2f0 <draw_line+0x78>
 2d0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2d4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2d8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2dc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 2e0:	e1a00001 	mov	r0, r1
		y1 = temp;
 2e4:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2e8:	e3a0a001 	mov	r10, #1
 2ec:	ea000006 	b	30c <draw_line+0x94>
 2f0:	e1a02008 	mov	r2, r8
		int temp = x1;
		x1 = y1;
		y1 = temp;

		temp = x2;
		x2 = y2;
 2f4:	e1a08003 	mov	r8, r3
		y2 = temp;
 2f8:	e1a03002 	mov	r3, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 2fc:	e1a02000 	mov	r2, r0
	}
	
	//if slope greater than one trades variables to switch from y/x to x/y
	if (is_steep) {
		int temp = x1;
		x1 = y1;
 300:	e1a00001 	mov	r0, r1
		y1 = temp;
 304:	e1a01002 	mov	r1, r2
	if (deltay < 0) {
		deltay = deltay * (-1);
	}

	//finds it the slope is greater than 1
	if (((deltax >= 0) && (deltay > deltax)) || ((deltax < 0) && (deltay > (deltax * (-1))))) {
 308:	e3a0a001 	mov	r10, #1
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 30c:	e1500008 	cmp	r0, r8
 310:	da000005 	ble	32c <draw_line+0xb4>
 314:	e1a02001 	mov	r2, r1
		int temp = x1;
		x1 = x2;
		x2 = temp;

		temp = y1;
		y1 = y2;
 318:	e1a01003 	mov	r1, r3
		y2 = temp;
 31c:	e1a03002 	mov	r3, r2
		x2 = y2;
		y2 = temp;
	}
	
	//ensures x2 is greater than x1
	if (x1 > x2) {
 320:	e1a02000 	mov	r2, r0
		int temp = x1;
		x1 = x2;
 324:	e1a00008 	mov	r0, r8
		x2 = temp;
 328:	e1a08002 	mov	r8, r2

		temp = y1;
		y1 = y2;
		y2 = temp;
	}
	deltay = y2 - y1;
 32c:	e0617003 	rsb	r7, r1, r3
	deltax = x2 - x1;
 330:	e060b008 	rsb	r11, r0, r8
	error = (-1)*(deltax / 2);
 334:	e08b4fab 	add	r4, r11, r11, lsr #31
 338:	e1a040c4 	asr	r4, r4, #1
 33c:	e2644000 	rsb	r4, r4, #0
 340:	e3570000 	cmp	r7, #0
 344:	b2677000 	rsblt	r7, r7, #0
		deltay = deltay * (-1);
	}

	//determines which way to increment y
	if (y1 < y2) {
		y_step = 1;
 348:	e1510003 	cmp	r1, r3
 34c:	a3e03000 	mvnge	r3, #0
 350:	b3a03001 	movlt	r3, #1
 354:	e58d3004 	str	r3, [sp, #4]
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 358:	e1500008 	cmp	r0, r8
 35c:	ca000010 	bgt	3a4 <draw_line+0x12c>
 360:	e1a05000 	mov	r5, r0
		y2 = temp;
	}
	deltay = y2 - y1;
	deltax = x2 - x1;
	error = (-1)*(deltax / 2);
	int y = y1;
 364:	e1a06001 	mov	r6, r1
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
			plot_pixel(y, x, colour);
		}
		else {
			plot_pixel(x, y, colour);
 368:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
		if (is_steep) {
 36c:	e35a0000 	cmp	r10, #0
			plot_pixel(y, x, colour);
 370:	11a00006 	movne	r0, r6
 374:	11a01005 	movne	r1, r5
		}
		else {
			plot_pixel(x, y, colour);
 378:	01a00005 	moveq	r0, r5
 37c:	01a01006 	moveq	r1, r6
 380:	e1a02009 	mov	r2, r9
 384:	ebffffb4 	bl	25c <plot_pixel>
		}

		error = error + deltay;

		if (error >= 0) {
 388:	e0944007 	adds	r4, r4, r7
			y = y + y_step;
 38c:	559d3004 	ldrpl	r3, [sp, #4]
 390:	50866003 	addpl	r6, r6, r3
			error = error - deltax;
 394:	506b4004 	rsbpl	r4, r11, r4
	}

	int x = 0;

	//plots all the pixels in the line
	for (x = x1; x <= x2; x++) {
 398:	e2855001 	add	r5, r5, #1
 39c:	e1580005 	cmp	r8, r5
 3a0:	aafffff1 	bge	36c <draw_line+0xf4>
		if (error >= 0) {
			y = y + y_step;
			error = error - deltax;
		}
	}	
}
 3a4:	e28dd00c 	add	sp, sp, #12
 3a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000003ac <clear_screen>:

//writes all pixels to black
void clear_screen() {
 3ac:	e92d4070 	push	{r4, r5, r6, lr}
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 3b0:	e3a05000 	mov	r5, #0
		}
	}	
}

//writes all pixels to black
void clear_screen() {
 3b4:	e1a06005 	mov	r6, r5
 3b8:	ea000009 	b	3e4 <clear_screen+0x38>
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
			plot_pixel(x, y, 0);
 3bc:	e1a00005 	mov	r0, r5
 3c0:	e1a01004 	mov	r1, r4
 3c4:	e1a02006 	mov	r2, r6
 3c8:	ebffffa3 	bl	25c <plot_pixel>
	int x = 0;
	
	for (x = 0; x < 320; x++) {
		int y = 0;
		
		for (y = 0; y < 240; y++) {
 3cc:	e2844001 	add	r4, r4, #1
 3d0:	e35400f0 	cmp	r4, #240	; 0xf0
 3d4:	1afffff8 	bne	3bc <clear_screen+0x10>

//writes all pixels to black
void clear_screen() {
	int x = 0;
	
	for (x = 0; x < 320; x++) {
 3d8:	e2855001 	add	r5, r5, #1
 3dc:	e3550d05 	cmp	r5, #320	; 0x140
 3e0:	08bd8070 	popeq	{r4, r5, r6, pc}
		}
	}	
}

//writes all pixels to black
void clear_screen() {
 3e4:	e1a04006 	mov	r4, r6
 3e8:	eafffff3 	b	3bc <clear_screen+0x10>

000003ec <wait_for_vsync>:
//waits for the S value in the registry to change to 0 indication the frame is drawn
void wait_for_vsync(){
	volatile int *pixel_ctrl_ptr = (int*)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1;
 3ec:	e3033fff 	movw	r3, #16383	; 0x3fff
 3f0:	e34f3f20 	movt	r3, #65312	; 0xff20
 3f4:	e3a02001 	mov	r2, #1
 3f8:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
 3fc:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	while((status & 0x01) != 0){
 400:	e3130001 	tst	r3, #1
 404:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr +3);
 408:	e3032fff 	movw	r2, #16383	; 0x3fff
 40c:	e34f2f20 	movt	r2, #65312	; 0xff20
 410:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	register int status;
	
	*pixel_ctrl_ptr = 1;
	
	status = *(pixel_ctrl_ptr + 3);
	while((status & 0x01) != 0){
 414:	e3130001 	tst	r3, #1
 418:	1afffffc 	bne	410 <wait_for_vsync+0x24>
 41c:	e12fff1e 	bx	lr

00000420 <main>:
}
	
	

int main(void)
{
 420:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 424:	e24dd008 	sub	sp, sp, #8
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	volatile int * pixel_buffer_back_ptr = (int *) 0xFF203024;
    /* Read location of the pixel buffer from the pixel buffer controller */
    
	*pixel_buffer_back_ptr = *pixel_ctrl_ptr;
 428:	e3034fff 	movw	r4, #16383	; 0x3fff
 42c:	e34f4f20 	movt	r4, #65312	; 0xff20
 430:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 434:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
	
	
	wait_for_vsync();
 438:	ebffffeb 	bl	3ec <wait_for_vsync>
	pixel_buffer_start = *pixel_ctrl_ptr;
 43c:	e5142fdf 	ldr	r2, [r4, #-4063]	; 0xfffff021
 440:	e3003e24 	movw	r3, #3620	; 0xe24
 444:	e3403000 	movt	r3, #0
 448:	e5832000 	str	r2, [r3]
	
    clear_screen();
 44c:	ebffffd6 	bl	3ac <clear_screen>
	int y = 0;
	int true = 1;
	int up = 0;
 450:	e3a07000 	mov	r7, #0
	
	wait_for_vsync();
	pixel_buffer_start = *pixel_ctrl_ptr;
	
    clear_screen();
	int y = 0;
 454:	e1a04007 	mov	r4, r7
	int true = 1;
	int up = 0;
	while(true){
		//draws horizontal line
		draw_line(0, y, 319, y, 0x001F);   // this line is blue
 458:	e3a0801f 	mov	r8, #31
 45c:	e1a05007 	mov	r5, r7
 460:	e300613f 	movw	r6, #319	; 0x13f
		if (y == 0){
			draw_line(0, (1), 319, (1), 0); 
			up = 0;
		}
		else if (y == 239){
			draw_line(0, 238, 319, 238, 0);
 464:	e3a090ee 	mov	r9, #238	; 0xee
			up = 1;
 468:	e3a0a001 	mov	r10, #1
	
    clear_screen();
	int y = 0;
	int true = 1;
	int up = 0;
	while(true){
 46c:	ea000023 	b	500 <main+0xe0>
		//draws horizontal line
		draw_line(0, y, 319, y, 0x001F);   // this line is blue
		
		//checks if line is at the top of bottom and erases last line
		if (y == 0){
			draw_line(0, (1), 319, (1), 0); 
 470:	e58d5000 	str	r5, [sp]
 474:	e1a00005 	mov	r0, r5
 478:	e1a0100a 	mov	r1, r10
 47c:	e1a02006 	mov	r2, r6
 480:	e1a0300a 	mov	r3, r10
 484:	ebffff7b 	bl	278 <draw_line>
 488:	ea000027 	b	52c <main+0x10c>
			up = 0;
		}
		else if (y == 239){
 48c:	e35400ef 	cmp	r4, #239	; 0xef
 490:	1a000007 	bne	4b4 <main+0x94>
			draw_line(0, 238, 319, 238, 0);
 494:	e58d5000 	str	r5, [sp]
 498:	e1a00005 	mov	r0, r5
 49c:	e1a01009 	mov	r1, r9
 4a0:	e1a02006 	mov	r2, r6
 4a4:	e1a03009 	mov	r3, r9
 4a8:	ebffff72 	bl	278 <draw_line>
			up = 1;
 4ac:	e1a0700a 	mov	r7, r10
 4b0:	ea00001b 	b	524 <main+0x104>
		}
		//checks if line is moving up or done and erases last line
		else if (up == 0){
 4b4:	e3570000 	cmp	r7, #0
 4b8:	1a000006 	bne	4d8 <main+0xb8>
			draw_line(0, (y -1), 319, (y -1), 0); 
 4bc:	e2443001 	sub	r3, r4, #1
 4c0:	e58d5000 	str	r5, [sp]
 4c4:	e1a00005 	mov	r0, r5
 4c8:	e1a01003 	mov	r1, r3
 4cc:	e1a02006 	mov	r2, r6
 4d0:	ebffff68 	bl	278 <draw_line>
 4d4:	ea000014 	b	52c <main+0x10c>
		}
		else if (up == 1){
 4d8:	e3570001 	cmp	r7, #1
 4dc:	1a000010 	bne	524 <main+0x104>
			draw_line(0, (y + 1), 319, (y + 1), 0); 
 4e0:	e2843001 	add	r3, r4, #1
 4e4:	e58d5000 	str	r5, [sp]
 4e8:	e1a00005 	mov	r0, r5
 4ec:	e1a01003 	mov	r1, r3
 4f0:	e1a02006 	mov	r2, r6
 4f4:	ebffff5f 	bl	278 <draw_line>
 4f8:	ea000009 	b	524 <main+0x104>
		else{
			y++;
		}
		
		//used for delay
		wait_for_vsync();
 4fc:	ebffffba 	bl	3ec <wait_for_vsync>
	int y = 0;
	int true = 1;
	int up = 0;
	while(true){
		//draws horizontal line
		draw_line(0, y, 319, y, 0x001F);   // this line is blue
 500:	e58d8000 	str	r8, [sp]
 504:	e1a00005 	mov	r0, r5
 508:	e1a01004 	mov	r1, r4
 50c:	e1a02006 	mov	r2, r6
 510:	e1a03004 	mov	r3, r4
 514:	ebffff57 	bl	278 <draw_line>
		
		//checks if line is at the top of bottom and erases last line
		if (y == 0){
 518:	e3540000 	cmp	r4, #0
 51c:	0affffd3 	beq	470 <main+0x50>
 520:	eaffffd9 	b	48c <main+0x6c>
			draw_line(0, (y + 1), 319, (y + 1), 0); 
		}
		
		//increments y depending on direction
		if(up){
			y--;
 524:	e2444001 	sub	r4, r4, #1
 528:	eafffff3 	b	4fc <main+0xdc>
		}
		else{
			y++;
 52c:	e2844001 	add	r4, r4, #1
 530:	e1a07005 	mov	r7, r5
 534:	eafffff0 	b	4fc <main+0xdc>

00000538 <atexit>:
 538:	e1a01000 	mov	r1, r0
 53c:	e3a00000 	mov	r0, #0
 540:	e92d4008 	push	{r3, lr}
 544:	e1a02000 	mov	r2, r0
 548:	e1a03000 	mov	r3, r0
 54c:	eb00000e 	bl	58c <__register_exitproc>
 550:	e8bd4008 	pop	{r3, lr}
 554:	e12fff1e 	bx	lr

00000558 <exit>:
 558:	e92d4008 	push	{r3, lr}
 55c:	e3a01000 	mov	r1, #0
 560:	e1a04000 	mov	r4, r0
 564:	eb000045 	bl	680 <__call_exitprocs>
 568:	e59f3018 	ldr	r3, [pc, #24]	; 588 <exit+0x30>
 56c:	e5930000 	ldr	r0, [r3]
 570:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 574:	e3530000 	cmp	r3, #0
 578:	11a0e00f 	movne	lr, pc
 57c:	112fff13 	bxne	r3
 580:	e1a00004 	mov	r0, r4
 584:	eb0000c9 	bl	8b0 <_exit>
 588:	00000970 	.word	0x00000970

0000058c <__register_exitproc>:
 58c:	e59fc0e4 	ldr	r12, [pc, #228]	; 678 <__register_exitproc+0xec>
 590:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 594:	e59c4000 	ldr	r4, [r12]
 598:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 59c:	e35c0000 	cmp	r12, #0
 5a0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 5a4:	e59c5004 	ldr	r5, [r12, #4]
 5a8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 5ac:	e355001f 	cmp	r5, #31
 5b0:	e24dd010 	sub	sp, sp, #16
 5b4:	e1a06000 	mov	r6, r0
 5b8:	da000015 	ble	614 <__register_exitproc+0x88>
 5bc:	e59f00b8 	ldr	r0, [pc, #184]	; 67c <__register_exitproc+0xf0>
 5c0:	e3500000 	cmp	r0, #0
 5c4:	1a000001 	bne	5d0 <__register_exitproc+0x44>
 5c8:	e3e00000 	mvn	r0, #0
 5cc:	ea000018 	b	634 <__register_exitproc+0xa8>
 5d0:	e3a00e19 	mov	r0, #400	; 0x190
 5d4:	e58d100c 	str	r1, [sp, #12]
 5d8:	e58d2008 	str	r2, [sp, #8]
 5dc:	e58d3004 	str	r3, [sp, #4]
 5e0:	e320f000 	nop	{0}
 5e4:	e250c000 	subs	r12, r0, #0
 5e8:	e59d100c 	ldr	r1, [sp, #12]
 5ec:	e59d2008 	ldr	r2, [sp, #8]
 5f0:	e59d3004 	ldr	r3, [sp, #4]
 5f4:	0afffff3 	beq	5c8 <__register_exitproc+0x3c>
 5f8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 5fc:	e3a00000 	mov	r0, #0
 600:	e58c0004 	str	r0, [r12, #4]
 604:	e58c5000 	str	r5, [r12]
 608:	e584c148 	str	r12, [r4, #328]	; 0x148
 60c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 610:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 614:	e3560000 	cmp	r6, #0
 618:	e59c4004 	ldr	r4, [r12, #4]
 61c:	1a000007 	bne	640 <__register_exitproc+0xb4>
 620:	e2843002 	add	r3, r4, #2
 624:	e2844001 	add	r4, r4, #1
 628:	e78c1103 	str	r1, [r12, r3, lsl #2]
 62c:	e58c4004 	str	r4, [r12, #4]
 630:	e3a00000 	mov	r0, #0
 634:	e28dd010 	add	sp, sp, #16
 638:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 63c:	e12fff1e 	bx	lr
 640:	e3a00001 	mov	r0, #1
 644:	e1a00410 	lsl	r0, r0, r4
 648:	e08c8104 	add	r8, r12, r4, lsl #2
 64c:	e3560002 	cmp	r6, #2
 650:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 654:	e5883108 	str	r3, [r8, #264]	; 0x108
 658:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 65c:	e1877000 	orr	r7, r7, r0
 660:	01830000 	orreq	r0, r3, r0
 664:	e1a05008 	mov	r5, r8
 668:	e5882088 	str	r2, [r8, #136]	; 0x88
 66c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 670:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 674:	eaffffe9 	b	620 <__register_exitproc+0x94>
 678:	00000970 	.word	0x00000970
 67c:	00000000 	.word	0x00000000

00000680 <__call_exitprocs>:
 680:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 684:	e59f3168 	ldr	r3, [pc, #360]	; 7f4 <__call_exitprocs+0x174>
 688:	e5933000 	ldr	r3, [r3]
 68c:	e24dd014 	sub	sp, sp, #20
 690:	e58d3004 	str	r3, [sp, #4]
 694:	e2833f52 	add	r3, r3, #328	; 0x148
 698:	e58d0008 	str	r0, [sp, #8]
 69c:	e58d300c 	str	r3, [sp, #12]
 6a0:	e1a07001 	mov	r7, r1
 6a4:	e3a08001 	mov	r8, #1
 6a8:	e59d3004 	ldr	r3, [sp, #4]
 6ac:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 6b0:	e3560000 	cmp	r6, #0
 6b4:	e59db00c 	ldr	r11, [sp, #12]
 6b8:	0a000033 	beq	78c <__call_exitprocs+0x10c>
 6bc:	e5965004 	ldr	r5, [r6, #4]
 6c0:	e2554001 	subs	r4, r5, #1
 6c4:	5286a088 	addpl	r10, r6, #136	; 0x88
 6c8:	5285501f 	addpl	r5, r5, #31
 6cc:	508a5105 	addpl	r5, r10, r5, lsl #2
 6d0:	5a000007 	bpl	6f4 <__call_exitprocs+0x74>
 6d4:	ea000029 	b	780 <__call_exitprocs+0x100>
 6d8:	e5953000 	ldr	r3, [r5]
 6dc:	e1530007 	cmp	r3, r7
 6e0:	0a000005 	beq	6fc <__call_exitprocs+0x7c>
 6e4:	e2444001 	sub	r4, r4, #1
 6e8:	e3740001 	cmn	r4, #1
 6ec:	e2455004 	sub	r5, r5, #4
 6f0:	0a000022 	beq	780 <__call_exitprocs+0x100>
 6f4:	e3570000 	cmp	r7, #0
 6f8:	1afffff6 	bne	6d8 <__call_exitprocs+0x58>
 6fc:	e5963004 	ldr	r3, [r6, #4]
 700:	e06a2005 	rsb	r2, r10, r5
 704:	e2433001 	sub	r3, r3, #1
 708:	e0862002 	add	r2, r6, r2
 70c:	e1530004 	cmp	r3, r4
 710:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 714:	13a01000 	movne	r1, #0
 718:	05864004 	streq	r4, [r6, #4]
 71c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 720:	e3530000 	cmp	r3, #0
 724:	0affffee 	beq	6e4 <__call_exitprocs+0x64>
 728:	e1a02418 	lsl	r2, r8, r4
 72c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 730:	e1120001 	tst	r2, r1
 734:	e5969004 	ldr	r9, [r6, #4]
 738:	0a000016 	beq	798 <__call_exitprocs+0x118>
 73c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 740:	e1120001 	tst	r2, r1
 744:	1a000016 	bne	7a4 <__call_exitprocs+0x124>
 748:	e59d0008 	ldr	r0, [sp, #8]
 74c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 750:	e1a0e00f 	mov	lr, pc
 754:	e12fff13 	bx	r3
 758:	e5963004 	ldr	r3, [r6, #4]
 75c:	e1530009 	cmp	r3, r9
 760:	1affffd0 	bne	6a8 <__call_exitprocs+0x28>
 764:	e59b3000 	ldr	r3, [r11]
 768:	e1530006 	cmp	r3, r6
 76c:	1affffcd 	bne	6a8 <__call_exitprocs+0x28>
 770:	e2444001 	sub	r4, r4, #1
 774:	e3740001 	cmn	r4, #1
 778:	e2455004 	sub	r5, r5, #4
 77c:	1affffdc 	bne	6f4 <__call_exitprocs+0x74>
 780:	e59f1070 	ldr	r1, [pc, #112]	; 7f8 <__call_exitprocs+0x178>
 784:	e3510000 	cmp	r1, #0
 788:	1a000009 	bne	7b4 <__call_exitprocs+0x134>
 78c:	e28dd014 	add	sp, sp, #20
 790:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 794:	e12fff1e 	bx	lr
 798:	e1a0e00f 	mov	lr, pc
 79c:	e12fff13 	bx	r3
 7a0:	eaffffec 	b	758 <__call_exitprocs+0xd8>
 7a4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 7a8:	e1a0e00f 	mov	lr, pc
 7ac:	e12fff13 	bx	r3
 7b0:	eaffffe8 	b	758 <__call_exitprocs+0xd8>
 7b4:	e5963004 	ldr	r3, [r6, #4]
 7b8:	e3530000 	cmp	r3, #0
 7bc:	e5963000 	ldr	r3, [r6]
 7c0:	1a000008 	bne	7e8 <__call_exitprocs+0x168>
 7c4:	e3530000 	cmp	r3, #0
 7c8:	0a000006 	beq	7e8 <__call_exitprocs+0x168>
 7cc:	e1a00006 	mov	r0, r6
 7d0:	e58b3000 	str	r3, [r11]
 7d4:	e320f000 	nop	{0}
 7d8:	e59b6000 	ldr	r6, [r11]
 7dc:	e3560000 	cmp	r6, #0
 7e0:	1affffb5 	bne	6bc <__call_exitprocs+0x3c>
 7e4:	eaffffe8 	b	78c <__call_exitprocs+0x10c>
 7e8:	e1a0b006 	mov	r11, r6
 7ec:	e1a06003 	mov	r6, r3
 7f0:	eafffff9 	b	7dc <__call_exitprocs+0x15c>
 7f4:	00000970 	.word	0x00000970
 7f8:	00000000 	.word	0x00000000

000007fc <register_fini>:
 7fc:	e92d4008 	push	{r3, lr}
 800:	e59f3010 	ldr	r3, [pc, #16]	; 818 <register_fini+0x1c>
 804:	e3530000 	cmp	r3, #0
 808:	159f000c 	ldrne	r0, [pc, #12]	; 81c <register_fini+0x20>
 80c:	1bffff49 	blne	538 <atexit>
 810:	e8bd4008 	pop	{r3, lr}
 814:	e12fff1e 	bx	lr
 818:	00000998 	.word	0x00000998
 81c:	00000820 	.word	0x00000820

00000820 <__libc_fini_array>:
 820:	e92d4038 	push	{r3, r4, r5, lr}
 824:	e59f5030 	ldr	r5, [pc, #48]	; 85c <__libc_fini_array+0x3c>
 828:	e59f4030 	ldr	r4, [pc, #48]	; 860 <__libc_fini_array+0x40>
 82c:	e0654004 	rsb	r4, r5, r4
 830:	e1b04144 	asrs	r4, r4, #2
 834:	10855104 	addne	r5, r5, r4, lsl #2
 838:	0a000004 	beq	850 <__libc_fini_array+0x30>
 83c:	e5353004 	ldr	r3, [r5, #-4]!
 840:	e1a0e00f 	mov	lr, pc
 844:	e12fff13 	bx	r3
 848:	e2544001 	subs	r4, r4, #1
 84c:	1afffffa 	bne	83c <__libc_fini_array+0x1c>
 850:	eb000050 	bl	998 <__libc_fini>
 854:	e8bd4038 	pop	{r3, r4, r5, lr}
 858:	e12fff1e 	bx	lr
 85c:	000009b0 	.word	0x000009b0
 860:	000009b4 	.word	0x000009b4

00000864 <__cs3_premain>:
 864:	e92d4008 	push	{r3, lr}
 868:	eb00001d 	bl	8e4 <__libc_init_array>
 86c:	e59f3030 	ldr	r3, [pc, #48]	; 8a4 <__cs3_premain+0x40>
 870:	e3530000 	cmp	r3, #0
 874:	15930000 	ldrne	r0, [r3]
 878:	01a00003 	moveq	r0, r3
 87c:	e59f3024 	ldr	r3, [pc, #36]	; 8a8 <__cs3_premain+0x44>
 880:	e3530000 	cmp	r3, #0
 884:	15931000 	ldrne	r1, [r3]
 888:	01a01003 	moveq	r1, r3
 88c:	e3a02000 	mov	r2, #0
 890:	ebfffee2 	bl	420 <main>
 894:	e59f3010 	ldr	r3, [pc, #16]	; 8ac <__cs3_premain+0x48>
 898:	e3530000 	cmp	r3, #0
 89c:	1bffff2d 	blne	558 <exit>
 8a0:	eafffffe 	b	8a0 <__cs3_premain+0x3c>
	...
 8ac:	00000558 	.word	0x00000558

000008b0 <_exit>:
 8b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 8b4:	e3a00018 	mov	r0, #24
 8b8:	e59f1004 	ldr	r1, [pc, #4]	; 8c4 <_exit+0x14>
 8bc:	ef123456 	svc	0x00123456
 8c0:	eafffffe 	b	8c0 <_exit+0x10>
 8c4:	00020026 	.word	0x00020026

000008c8 <__cs3_isr_interrupt>:
 8c8:	eafffffe 	b	8c8 <__cs3_isr_interrupt>

000008cc <__cs3_isr_undef>:
 8cc:	eafffffe 	b	8cc <__cs3_isr_undef>

000008d0 <__cs3_isr_swi>:
 8d0:	eafffffe 	b	8d0 <__cs3_isr_swi>

000008d4 <__cs3_isr_pabort>:
 8d4:	eafffffe 	b	8d4 <__cs3_isr_pabort>

000008d8 <__cs3_isr_dabort>:
 8d8:	eafffffe 	b	8d8 <__cs3_isr_dabort>

000008dc <__cs3_isr_irq>:
 8dc:	eafffffe 	b	8dc <__cs3_isr_irq>

000008e0 <__cs3_isr_fiq>:
 8e0:	eafffffe 	b	8e0 <__cs3_isr_fiq>

000008e4 <__libc_init_array>:
 8e4:	e92d4070 	push	{r4, r5, r6, lr}
 8e8:	e59f506c 	ldr	r5, [pc, #108]	; 95c <__libc_init_array+0x78>
 8ec:	e59f606c 	ldr	r6, [pc, #108]	; 960 <__libc_init_array+0x7c>
 8f0:	e0656006 	rsb	r6, r5, r6
 8f4:	e1b06146 	asrs	r6, r6, #2
 8f8:	12455004 	subne	r5, r5, #4
 8fc:	13a04000 	movne	r4, #0
 900:	0a000005 	beq	91c <__libc_init_array+0x38>
 904:	e5b53004 	ldr	r3, [r5, #4]!
 908:	e2844001 	add	r4, r4, #1
 90c:	e1a0e00f 	mov	lr, pc
 910:	e12fff13 	bx	r3
 914:	e1560004 	cmp	r6, r4
 918:	1afffff9 	bne	904 <__libc_init_array+0x20>
 91c:	e59f5040 	ldr	r5, [pc, #64]	; 964 <__libc_init_array+0x80>
 920:	e59f6040 	ldr	r6, [pc, #64]	; 968 <__libc_init_array+0x84>
 924:	e0656006 	rsb	r6, r5, r6
 928:	eb000012 	bl	978 <_init>
 92c:	e1b06146 	asrs	r6, r6, #2
 930:	12455004 	subne	r5, r5, #4
 934:	13a04000 	movne	r4, #0
 938:	0a000005 	beq	954 <__libc_init_array+0x70>
 93c:	e5b53004 	ldr	r3, [r5, #4]!
 940:	e2844001 	add	r4, r4, #1
 944:	e1a0e00f 	mov	lr, pc
 948:	e12fff13 	bx	r3
 94c:	e1560004 	cmp	r6, r4
 950:	1afffff9 	bne	93c <__libc_init_array+0x58>
 954:	e8bd4070 	pop	{r4, r5, r6, lr}
 958:	e12fff1e 	bx	lr
 95c:	00000990 	.word	0x00000990
 960:	00000990 	.word	0x00000990
 964:	00000990 	.word	0x00000990
 968:	00000998 	.word	0x00000998

Disassembly of section .rodata:

00000970 <_global_impure_ptr>:
 970:	000009d8 00000043                       ....C...

00000978 <_init>:
 978:	e1a0c00d 	mov	r12, sp
 97c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 980:	e24cb004 	sub	r11, r12, #4
 984:	e24bd028 	sub	sp, r11, #40	; 0x28
 988:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 98c:	e12fff1e 	bx	lr

00000990 <__init_array_start>:
 990:	000007fc 	.word	0x000007fc

00000994 <__frame_dummy_init_array_entry>:
 994:	00000208                                ....

00000998 <__libc_fini>:
 998:	e1a0c00d 	mov	r12, sp
 99c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 9a0:	e24cb004 	sub	r11, r12, #4
 9a4:	e24bd028 	sub	sp, r11, #40	; 0x28
 9a8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 9ac:	e12fff1e 	bx	lr

000009b0 <__fini_array_start>:
 9b0:	000001c4 	.word	0x000001c4

000009b4 <__cs3_regions>:
	...
 9c0:	00000e08 	.word	0x00000e08
 9c4:	00000020 	.word	0x00000020
